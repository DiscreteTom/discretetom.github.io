(window.webpackJsonp=window.webpackJsonp||[]).push([[41,672,673,674,675,676,677,678],{1355:function(t,n,r){const e={render:function(){var t=this;t.$createElement;return t._self._c,t._m(0)},staticRenderFns:[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"frontmatter-markdown"},[e("h2",{attrs:{id:"复习"}},[t._v("复习")]),t._v(" "),e("p",[t._v("上下文无关文法，2型文法，生成式要求左侧只能为一个非终结符，对应的识别器为"),e("strong",[t._v("下推自动机PDA(Push Down Automata)")])]),t._v(" "),e("h2",{attrs:{id:"推导树与二义性"}},[t._v("推导树与二义性")]),t._v(" "),e("h3",{attrs:{id:"规约与推导"}},[t._v("规约与推导")]),t._v(" "),e("p",[t._v("判断字符串是否属于某语言的方法：")]),t._v(" "),e("ul",[e("li",[t._v("规约\n"),e("ul",[e("li",[t._v("自下而上")]),t._v(" "),e("li",[t._v("把生成式的右部(body)替换为生成式的左部(head)")]),t._v(" "),e("li",[t._v("把字符串中的符号用生成式替代，最后得到生成式的起始符号")])])]),t._v(" "),e("li",[t._v("推导\n"),e("ul",[e("li",[t._v("自上而下")]),t._v(" "),e("li",[t._v("把生成式的左部(head)替换为生成式的右部(body)")]),t._v(" "),e("li",[t._v("从生成式的起始符号推导出字符串")])])])]),t._v(" "),e("p",[e("strong",[t._v("最左推导(leftmost derivations)")]),t._v("：每次推导只替换出现在最左边的非终结符")]),t._v(" "),e("p",[t._v("最左推导关系用"),e("img",{attrs:{src:r(812),alt:"3-1"}}),t._v("符号表示，其传递闭包用"),e("img",{attrs:{src:r(813),alt:"3-3"}}),t._v("表示")]),t._v(" "),e("p",[t._v("最左推导举例：")]),t._v(" "),e("p",[e("img",{attrs:{src:r(814),alt:"3-2"}})]),t._v(" "),e("p",[e("strong",[t._v("最右推导(rightmost derivations)")]),t._v("：每次推导只替换出现在最右边的非终结符。")]),t._v(" "),e("p",[t._v("最右推导的符号等于上面最左推导的符号里面的"),e("code",{pre:!0},[t._v("l")]),t._v("换成"),e("code",{pre:!0},[t._v("r")])]),t._v(" "),e("p",[t._v("最右推导举例：")]),t._v(" "),e("p",[e("img",{attrs:{src:r(815),alt:"3-4"}})]),t._v(" "),e("h3",{attrs:{id:"推导树"}},[t._v("推导树")]),t._v(" "),e("p",[t._v("使用图的方法表示一个串的推导")]),t._v(" "),e("p",[t._v("推导树举例：")]),t._v(" "),e("p",[e("img",{attrs:{src:r(816),alt:"3-5"}})]),t._v(" "),e("p",[e("strong",[t._v("边缘")]),t._v("：所有叶子节点从左向右组成的串称为推导树的边缘")]),t._v(" "),e("p",[t._v("显然某个推导树的边缘就是这个推导树生成的串")]),t._v(" "),e("h3",{attrs:{id:"二义性"}},[t._v("二义性")]),t._v(" "),e("p",[t._v("上面的例子可以看出同一个串可能会有多个推导树")]),t._v(" "),e("p",[t._v("定义：2型文法是二义的，当且仅当对于串ω，存在两棵不同的具有边缘为ω的推导树")]),t._v(" "),e("p",[t._v("如果文法是二义的，那么它所产生的某个串必然能从不同的最左（右）推导推出")]),t._v(" "),e("p",[e("strong",[t._v("无消除二义性的一般算法")])]),t._v(" "),e("h2",{attrs:{id:"上下文无关文法的变换"}},[t._v("上下文无关文法的变换")]),t._v(" "),e("h3",{attrs:{id:"生成式的标准形式"}},[t._v("生成式的标准形式")]),t._v(" "),e("p",[e("strong",[t._v("Chomsky范式(CNF - Chomsky Normal Form)")])]),t._v(" "),e("p",[t._v("生成式格式为")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BC\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\nA/B/C为非终结符\na为终结符\n")])]),t._v(" "),e("p",[e("strong",[t._v("Greibach范式(GNF - Greibach Normal Form)")])]),t._v(" "),e("p",[t._v("生成式格式为")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aω\nA为非终结符\na为终结符\nω为非终结符串（可以为空）\n")])]),t._v(" "),e("p",[t._v("意义：对每个2型语言都可以找到一个文法使产生式的右端以终结符开始。思想为"),e("strong",[t._v("消除左递归")])]),t._v(" "),e("h3",{attrs:{id:"算法1-找出生成符号"}},[t._v("算法1 找出生成符号")]),t._v(" "),e("p",[t._v("递归：")]),t._v(" "),e("ul",[e("li",[t._v("任何终结符都是生成符号")]),t._v(" "),e("li",[t._v("如果有生成式"),e("code",{pre:!0},[t._v("A -> ω")]),t._v("，ω中的每一个符号都是生成符号，则A也是生成符号")])]),t._v(" "),e("h3",{attrs:{id:"算法2-找出可达符号"}},[t._v("算法2 找出可达符号")]),t._v(" "),e("p",[t._v("递归：")]),t._v(" "),e("ul",[e("li",[t._v("初始符号S是可达符号")]),t._v(" "),e("li",[t._v("如果有生成式"),e("code",{pre:!0},[t._v("A -> ω")]),t._v("，A是可达符号，则ω中的所有非终结符为可达符号")])]),t._v(" "),e("p",[t._v("如果要消除非生成符号和不可达符号，"),e("strong",[t._v("必须先执行算法1再执行算法2，不能颠倒")]),t._v("，否则可能会导致无用符号没有被完全删除。")]),t._v(" "),e("p",[t._v("例：已知2型文法"),e("code",{pre:!0},[t._v("F = ({S, A, B}, {a}, P, S)")]),t._v("，其中生成式P：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" AB\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\n")])]),t._v(" "),e("p",[t._v("如果先执行算法2再执行算法1")]),t._v(" "),e("ol",[e("li",[t._v("消除不可达符号：无")]),t._v(" "),e("li",[t._v("消除非生成符号：B，因此删除生成式"),e("code",{pre:!0},[t._v("S -> AB")])])]),t._v(" "),e("p",[t._v("此时非生成符A变为不可达符号")]),t._v(" "),e("h3",{attrs:{id:"算法3-消除ε产生式"}},[t._v("算法3 消除ε产生式")]),t._v(" "),e("p",[t._v("目的：使文法规范化")]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("ul",[e("li",[t._v("可致空符号：可通过一系列变换生成空串的符号")]),t._v(" "),e("li",[t._v("无ε文法：生成式中无任何ε产生式，或只有一个可致空符号"),e("code",{pre:!0},[t._v("S -> ε")]),t._v("且S不出现在任何生成式的右边")])]),t._v(" "),e("p",[t._v("方法：若原文法生成式右侧存在致空符号，则无ε文法的生成式在拥有原生成式的基础上添加把致空符号视为空串得到的新生成式")]),t._v(" "),e("p",[t._v("举例：假设存在生成式"),e("code",{pre:!0},[t._v("S -> ABCDE")]),t._v("，其中A、C、E可致空")]),t._v(" "),e("p",[t._v("将“把致空符号视为空串”编码为0，“把致空符号视为普通生成符号”编码为1，那么排列ACE应得到8种情况，从000到111")]),t._v(" "),e("p",[t._v("那么无ε文法将得到如下生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BD    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("000"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BDE   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("001"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BCD   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("010"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BCDE  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("011"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ABD   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ABDE  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ABCD  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nS -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ABCDE "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("p",[t._v("如果化简到最后初始符号S可致空且S出现在了生成式右边，则消除"),e("code",{pre:!0},[t._v("S -> ε")]),t._v("，添加新符号"),e("code",{pre:!0},[t._v("S'")]),t._v("，拥有如下生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S' -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ε\n")])]),t._v(" "),e("p",[t._v("消除ε产生式之后会产生非生成符号，需要再调用算法1")]),t._v(" "),e("h3",{attrs:{id:"算法4-消除单产生式"}},[t._v("算法4 消除单产生式")]),t._v(" "),e("p",[e("strong",[t._v("单产生式")]),t._v("：形如"),e("code",{pre:!0},[t._v("A -> B")]),t._v("的产生式，其中AB为非终结符")]),t._v(" "),e("p",[t._v("目的：减少推导步数，规范文法")]),t._v(" "),e("p",[e("strong",[t._v("单元偶对(unit pairs)")]),t._v("：称"),e("code",{pre:!0},[t._v("(A, B)")]),t._v("是单元偶对当且仅当A可以仅使用单生成式生成B")]),t._v(" "),e("p",[t._v("思路：如果存在单元偶对"),e("code",{pre:!0},[t._v("(A, B)")]),t._v("和非单生成式"),e("code",{pre:!0},[t._v("B -> ω")]),t._v("，则加入生成式"),e("code",{pre:!0},[t._v("A -> ω")])]),t._v(" "),e("p",[t._v("例题：2型文法"),e("code",{pre:!0},[t._v("G = ({S, A, B}, {(, ), +, *, a}, P, S)")]),t._v("，其中生成式P：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S + A "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" A\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A * B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" B\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\n")])]),t._v(" "),e("p",[t._v("其中的单元偶对")]),t._v(" "),e("ul",[e("li",[t._v("(S, A)")]),t._v(" "),e("li",[t._v("(A, B)")]),t._v(" "),e("li",[t._v("(S, B)")])]),t._v(" "),e("p",[t._v("所以得到如下新生成式")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A * B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A * B\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A, B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A, B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S, B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S, B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\n")])]),t._v(" "),e("h3",{attrs:{id:"小结"}},[t._v("小结")]),t._v(" "),e("p",[t._v("简化2型文法的步骤（注意顺序）")]),t._v(" "),e("ol",[e("li",[t._v("消除ε产生式 - 算法3")]),t._v(" "),e("li",[t._v("消除单产生式 - 算法4")]),t._v(" "),e("li",[t._v("消除非生成符号 - 算法1")]),t._v(" "),e("li",[t._v("消除不可达符号 - 算法2")])]),t._v(" "),e("h3",{attrs:{id:"算法5-消除左递归"}},[t._v("算法5 消除左递归")]),t._v(" "),e("p",[t._v("左递归格式："),e("code",{pre:!0},[t._v("A -> Aω")])]),t._v(" "),e("p",[t._v("思想：假设存在生成式"),e("code",{pre:!0},[t._v("A -> Aa | b")]),t._v("，显然A的正则式是"),e("code",{pre:!0},[t._v("ba*")]),t._v("。所以消除左递归之后应存在如下生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" bB\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\n")])]),t._v(" "),e("p",[t._v("这样的正则式也是"),e("code",{pre:!0},[t._v("ba*")])]),t._v(" "),e("p",[t._v("推广：假设存在如下生成式")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Aω1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Aω2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Aωm "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" an\n")])]),t._v(" "),e("p",[t._v("则消除左递归后的文法应使用如下生成式取代上述生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a1B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a2B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". anB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" an\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ω1B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ω2B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ωmB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ω1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ω2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ωm\n")])]),t._v(" "),e("p",[t._v("上述二者的正则式都是"),e("code",{pre:!0},[t._v("(a1 + a2 + ... + an)(ω1 + ω2 + ... + ωm)*")])]),t._v(" "),e("p",[t._v("例题：已知如下生成式")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" S + A "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" A\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A * B "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" B\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\n")])]),t._v(" "),e("p",[t._v("则新文法应含有如下生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" AS"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' | A\nS'")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" + AS"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' | + A\nA -> BA'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" B\nA"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' -> * BA'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * B\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\n")])]),t._v(" "),e("h2",{attrs:{id:"cnf-gnf"}},[t._v("CNF & GNF")]),t._v(" "),e("p",[t._v("Chomsky范式(Chomsky Normal Form) & Greibach范式(Greibach Normal Form)")]),t._v(" "),e("h3",{attrs:{id:"2型文法转换为等价cnf"}},[t._v("2型文法转换为等价CNF")]),t._v(" "),e("p",[t._v("CNF文法格式："),e("code",{pre:!0},[t._v("A -> BC | a")])]),t._v(" "),e("p",[t._v("构造CNF步骤：")]),t._v(" "),e("ol",[e("li",[t._v("使用算法1、2、3、4消除ε生成式、无用符号、单生成式")]),t._v(" "),e("li",[t._v("转换"),e("code",{pre:!0},[t._v("A -> D1D2...Dn")]),t._v("：\n"),e("ul",[e("li",[t._v("如果Di为终结符，则引入新生成式"),e("code",{pre:!0},[t._v("Bi -> Di")]),t._v("，Bi是新的非终结符")]),t._v(" "),e("li",[t._v("如果Di为非终结符，则令"),e("code",{pre:!0},[t._v("Bi = Di")]),t._v("，原生成式变化为"),e("code",{pre:!0},[t._v("A -> B1B2...Bn")]),t._v("。如果n大于2，则将其变为"),e("code",{pre:!0},[t._v("A -> B1C1, C1 -> B2C2, ...")]),t._v("，其中Ci为新引入的非终结符")])])])]),t._v(" "),e("p",[t._v("例题：已知"),e("code",{pre:!0},[t._v("G = {A, B, S}, {a, b}, P, S)")]),t._v("是无ε、无循环、无无用符号、无单生成式的文法，生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aAB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" BA\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BBB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" AS "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b\n")])]),t._v(" "),e("p",[t._v("解："),e("code",{pre:!0},[t._v("S -> BA, A -> a, B -> AS, B -> b")]),t._v("已经是CNF。把"),e("code",{pre:!0},[t._v("S -> aAB")]),t._v("变换为"),e("code",{pre:!0},[t._v("S -> C1C2, C1 -> a, C2 -> AB")]),t._v("，把"),e("code",{pre:!0},[t._v("A -> BBB")]),t._v("变换为"),e("code",{pre:!0},[t._v("A -> BC3, C3 -> BB")])]),t._v(" "),e("h3",{attrs:{id:"2型文法转换为等价gnf"}},[t._v("2型文法转换为等价GNF")]),t._v(" "),e("p",[t._v("GNF生成式格式："),e("code",{pre:!0},[t._v("A -> aω")]),t._v("，其中ω为非终结符串（可以为空）")]),t._v(" "),e("p",[t._v("GNF构造步骤")]),t._v(" "),e("ol",[e("li",[t._v("把2型文法变换为CNF")]),t._v(" "),e("li",[t._v("对非终结符进行编号")]),t._v(" "),e("li",[t._v("如果存在生成式"),e("code",{pre:!0},[t._v("Ai -> Aj ω")]),t._v("其中Ai的编号不小于Aj的编号，则把之前Aj的生成式代入，直到左侧非终结符Ai的编号不大于右侧第一个非终结符的编号")]),t._v(" "),e("li",[t._v("消左递归，对"),e("code",{pre:!0},[t._v("An -> Anω")]),t._v("进行变换，得到An的无左递归生成式")]),t._v(" "),e("li",[t._v("把An的无左递归生成式回代如编号小的非终结符的生成式")])]),t._v(" "),e("p",[t._v("例题：已知CNF拥有如下生成式：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("A -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BC\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b\nC -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" AB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\n")])]),t._v(" "),e("p",[t._v("对非终结符进行编号：A - 1, B - 2, C - 3")]),t._v(" "),e("p",[t._v("在生成式"),e("code",{pre:!0},[t._v("C -> AB")]),t._v("中左侧非终结符编号大于右侧第一个非终结符编号，把A的生成式代入得"),e("code",{pre:!0},[t._v("C -> BCB | a")]),t._v("，仍然不满足条件。把B的生成式代入得"),e("code",{pre:!0},[t._v("C -> CACB | bCB | a")])]),t._v(" "),e("p",[t._v("消除左递归，可得")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("C -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bCBC"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' | aC'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" bCB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" a\nC"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' -> ACBC'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ACB\n")])]),t._v(" "),e("p",[t._v("现在得到了C的生成式，回代入以C开头的生成式"),e("code",{pre:!0},[t._v("B -> CA")]),t._v("，得到。。。略")]),t._v(" "),e("p",[t._v("就这样最后得到所有非终结符的生成式")]),t._v(" "),e("h2",{attrs:{id:"下推自动机"}},[t._v("下推自动机")]),t._v(" "),e("p",[t._v("PDA(Push Down Automaton)")]),t._v(" "),e("p",[t._v("PDA的形式定义：一个七元组"),e("code",{pre:!0},[t._v("M = (Q, T, Γ, δ, q0, z0, F)")]),t._v("，其中")]),t._v(" "),e("ul",[e("li",[t._v("Q 有限控制器状态集合")]),t._v(" "),e("li",[t._v("T 有限输入字母表")]),t._v(" "),e("li",[t._v("Γ 有限下推栈字母表")]),t._v(" "),e("li",[t._v("δ 状态转移函数")]),t._v(" "),e("li",[t._v("q0 初始状态")]),t._v(" "),e("li",[t._v("z0 下推栈起始符号")]),t._v(" "),e("li",[t._v("F 终态集合")])]),t._v(" "),e("p",[t._v("转换函数的格式："),e("code",{pre:!0},[t._v("δ(q, a, Z) = {(p, ω)}")]),t._v("意为当前状态为q，当前栈顶为Z，接收字符a，转移为状态p，栈顶为ω。如果"),e("code",{pre:!0},[t._v("ω = ε")]),t._v("则弹栈")]),t._v(" "),e("p",[t._v("规定ω中的最左符号位栈顶")]),t._v(" "),e("p",[t._v("下推自动机的图形表示：")]),t._v(" "),e("p",[e("img",{attrs:{src:r(817),alt:"3-6"}})]),t._v(" "),e("ul",[e("li",[t._v("确定的下推自动机DPDA")]),t._v(" "),e("li",[t._v("不确定的下推自动机NPDA")])]),t._v(" "),e("p",[t._v("下推自动机的格局：一个三元组"),e("code",{pre:!0},[t._v("(当前状态, 待处理串, 当前下推栈状态)")])]),t._v(" "),e("p",[t._v("下推自动机的两种接收方式：")]),t._v(" "),e("ul",[e("li",[t._v("终态接收，即接收串后走到终态")]),t._v(" "),e("li",[t._v("空栈接收，即接收串后下推栈为空（连初始栈顶也弹出来了）")])]),t._v(" "),e("p",[t._v("空栈接收与终态接收是可以等价的")]),t._v(" "),e("p",[t._v("使用空栈接收时，终止状态可以为任意状态，此时F取"),e("code",{pre:!0},[t._v("φ")])]),t._v(" "),e("h2",{attrs:{id:"上下文无关文法与下推自动机"}},[t._v("上下文无关文法与下推自动机")]),t._v(" "),e("h3",{attrs:{id:"上下文无关文法构造等价下推自动机"}},[t._v("上下文无关文法构造等价下推自动机")]),t._v(" "),e("p",[t._v("构造出来的下推自动机是按照文法的最左推导方式工作")]),t._v(" "),e("p",[t._v("只需要一个状态q0即可")]),t._v(" "),e("p",[t._v("思路：对于生成式"),e("code",{pre:!0},[t._v("A -> aBC | a")]),t._v("，自动机设置一个空转移函数"),e("code",{pre:!0},[t._v("δ(q0, ε, A) = {(q0, aBC), (q0, a)}")]),t._v("，即A可以无条件地转移到"),e("code",{pre:!0},[t._v("aBC | a")]),t._v("。然后对于所有终结符x，设置转移函数"),e("code",{pre:!0},[t._v("δ(q0, x, x) = (q0, ε)")]),t._v("，即把非终结符从栈中弹出")]),t._v(" "),e("p",[t._v("例题：已知文法拥有如下生成式")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("E -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" EOE "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" d\nO -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" + "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" *\n")])]),t._v(" "),e("p",[t._v("则生成的PDA为"),e("code",{pre:!0},[t._v("M = ({q}, {v, d, +, *, (, )}, {E, O, v, d, +, *, (, )}, δ, q, E, φ)")]),t._v("，其中δ定义为：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("用于压栈的函数\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, ε, E"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, EOE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, ε, O"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, +"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, *"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n用于弹栈的函数\n   δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, v, "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, d, d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, +, +"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, *, *"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("p",[t._v("使用此自动机分析串"),e("code",{pre:!0},[t._v("v * (v + d)")]),t._v("的过程为：")]),t._v(" "),e("ol",[e("li",[t._v("首先自动机根据空转移在下推栈中构造出需要分析的串")]),t._v(" "),e("li",[t._v("根据输入弹栈，串输入完毕时栈正好弹空")])]),t._v(" "),e("h3",{attrs:{id:"下推自动机构造等价上下文无关文法"}},[t._v("下推自动机构造等价上下文无关文法")]),t._v(" "),e("p",[t._v("思路：使串在文法中的一个最左推导对应于自动机中的一系列移动")]),t._v(" "),e("p",[e("strong",[t._v("下面的描述，因为课件里面的描述非常迷，所以我按照我的理解进行了修改和补充，请参考着看")])]),t._v(" "),e("p",[t._v("采用形如"),e("code",{pre:!0},[t._v("[q, z, p]")]),t._v("的非终结符，意为"),e("strong",[t._v("一个串的集合")]),t._v("，里面的串满足："),e("strong",[t._v("从q状态出发，栈的内容为zω（即栈顶为z）时，被处理完之后转移到p状态且栈的内容为ω")])]),t._v(" "),e("p",[t._v("以下图为例")]),t._v(" "),e("p",[e("img",{attrs:{src:r(818),alt:"3-7"}})]),t._v(" "),e("p",[t._v("我们有一个状态转移函数"),e("code",{pre:!0},[t._v("δ(q, a, z) = (r, A)")])]),t._v(" "),e("p",[t._v("假设一个串从q出发，经过状态r，最后到达状态p。假设在状态q时栈的内容为zω，那么到达状态r时栈的内容应为Aω。假设到达状态p时栈的内容为ω，即如果一个串“从状态q出发，在栈的内容为zω时，处理完串之后转移到状态p且栈顶为ω”，也就是"),e("code",{pre:!0},[t._v("[q, z, p]")]),t._v("。那么这个串能够被拆分成两部分，第一部分是字符a，自动机在p状态且栈顶为z时接收这个字符a，并把栈顶从z变成A，第二步“从状态r出发，在栈的内容为Aω时，处理完剩下的串之后转移到状态p且栈的内容为ω”，也就是"),e("code",{pre:!0},[t._v("[r, A, p]")])]),t._v(" "),e("p",[t._v("也就是说，原本的串"),e("code",{pre:!0},[t._v("[q, z, p]")]),t._v("被分成了"),e("code",{pre:!0},[t._v("a")]),t._v("和"),e("code",{pre:!0},[t._v("[r, A, p]")]),t._v("两部分，即得到生成式"),e("code",{pre:!0},[t._v("[q, z, p] -> a[r, A, p]")])]),t._v(" "),e("p",[t._v("类似地，可以得到如下结论：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, a, z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q, z, r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q, a, z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r, ABCDE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q, z, p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r, ABCDE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("., p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("p",[t._v("当然我们不希望栈顶是“ABCDE…”这么长，那么我们可以在从状态r到状态p的中间状态中选出“断点”状态（这个词是我瞎掰的）。比如：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q, z, p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r, ABCDE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".Z, p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n从r到q中间选择中间点q1, q2, "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".q25\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q, z, p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, B, q2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q25, Z, p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("p",[t._v("显然已知"),e("code",{pre:!0},[t._v("δ(q, a, z) = (r, ω)")]),t._v("的时候，因为不知道把串处理完了的时候到达的状态r是哪个状态，所以要把所有的状态作为“到达状态”遍历一遍")]),t._v(" "),e("p",[t._v("例题：已知PDA "),e("code",{pre:!0},[t._v("M = ({q0, q1}, {a, b}, {A, z0}, δ, q0, z0, φ)")]),t._v("，其中状态转移函数：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, a, z0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, Az0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, a, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, AA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, b, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, b, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nδ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε, z0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("p",[t._v("生成文法如下：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, a, z0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, Az0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，字符串经过此操作后到达的状态可能是q0也可能是q1，所以得到生成式\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, Az0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, Az0, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n因为生成式右边的栈顶长度不为1，需要再次寻找中间状态来分隔。中间状态可以为q0或者q1，所以得到生成式\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0,z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, z0, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, a, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, AA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("可以得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, AA, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, AA, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n进一步分解得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, A, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q0, b, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("可以得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q0, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b\n\n由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, b, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("可以得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b\n\n由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε, A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("可以得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, A, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ε\n\n由δ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε, z0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q1, ε"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("可以得到\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q1, z0, q1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ε\n")])]),t._v(" "),e("p",[t._v("这样就得到了所有生成式，再进行重命名、删除无用符号之后就得到了等价上下文无关文法：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("S -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" A\nA -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aCD\nB -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ε\nC -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" aCB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b\nD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ε\n")])]),t._v(" "),e("h2",{attrs:{id:"上下文无关语言的性质"}},[t._v("上下文无关语言的性质")]),t._v(" "),e("h3",{attrs:{id:"2型语言的泵浦引理"}},[t._v("2型语言的泵浦引理")]),t._v(" "),e("p",[t._v("设L是上下文无关语言，存在常数p，如果ω是L中的一个串，ω的长度不小于p，则ω可以写为"),e("code",{pre:!0},[t._v("ω1ω2ω0ω3ω4")]),t._v("，使ω2ω3不为空串（即ω2与ω3不同时为空），且ω2ω0ω3的长度不大于p，且对于任意非负整数i，有ω1ω2^iω0ω3^iω4是L的一个串（不含"),e("code",{pre:!0},[t._v("L = { ε }")]),t._v("的情况）")]),t._v(" "),e("p",[t._v("物理意义：和正则的泵浦引理类似。该语言中的一个串ω含有两个靠的很近的子串ω2和ω3，它们可以重复任意多次（但是二者的重复次数相同），所得的新串仍属于该语言")]),t._v(" "),e("p",[t._v("应用过程也与正则泵浦引理类似，用来证明某个语言不是上下文无关文法")]),t._v(" "),e("p",[t._v("例题：证明"),e("code",{pre:!0},[t._v("L = {a^n b^n c^n | n >=1}")]),t._v("不是2型语言")]),t._v(" "),e("p",[t._v("证明：假设L是2型语言，令p为泵长，取L中的一个串"),e("code",{pre:!0},[t._v("ω = a^p b^p c^p")]),t._v("，其串长大于p，则可以将ω写成ω1ω2ω0ω3ω4。考虑"),e("code",{pre:!0},[t._v("ω1 ω2^i ω0 ω3^i ω4")]),t._v("也符合此语言，所以")]),t._v(" "),e("ol",[e("li",[t._v("首先，ω2与ω3不能都为空")]),t._v(" "),e("li",[t._v("如果ω2含有字母，ω3为空，那么为了保证所有字母数量相同，ω2中必须包含等量的a、b、c，所以ω2只能等于ω，不满足ω2ω0ω3的长度不大于p的限制。同理，也不能ω2为空而ω3有字母")]),t._v(" "),e("li",[t._v("ω2与ω3不能分别只含有一种字母或两种字幕，否则第三个字母的数量将不等于ω2ω3中含有的两个字母的数量")]),t._v(" "),e("li",[t._v("假设ω2含有一种字母而ω3含有两种或三种字母，则ω2ω0ω3的长度大于p")])]),t._v(" "),e("p",[t._v("综上所述，不存在这样的一个ω的划分。所以此语言不是2型文法")]),t._v(" "),e("h3",{attrs:{id:"2型语言的封闭性"}},[t._v("2型语言的封闭性")]),t._v(" "),e("p",[t._v("已知2型语言L1，L2，则他们的"),e("strong",[t._v("并、连接、闭包")]),t._v("为2型语言")]),t._v(" "),e("p",[e("strong",[t._v("注意：2型语言对“交”不封闭")])]),t._v(" "),e("p",[t._v("举例：已知"),e("code",{pre:!0},[t._v("L1 = {a^n b^n c^m | m, n >= 1}")]),t._v("为2型语言，"),e("code",{pre:!0},[t._v("L2 = {a^m b^n c^n | m, n >= 1}")]),t._v("为2型语言，二者的交"),e("code",{pre:!0},[t._v("L3 = {a^n b^n c^n | n >= 1}")]),t._v("不是2型语言")]),t._v(" "),e("p",[t._v("2型语言对“补运算”不封闭。因为如果对补运算封闭则对“交”封闭。已知对“交”不封闭所以对“补”不封闭")])])}]};t.exports={attributes:{layout:"collection",title:"上下文无关文法与下推自动机",collection:"FormalLanguageAndAutomata"},vue:{render:e.render,staticRenderFns:e.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=e.render,this.$options.staticRenderFns=e.staticRenderFns}}}}},812:function(t,n,r){t.exports=r.p+"img/3-1.a9b02c9.png"},813:function(t,n,r){t.exports=r.p+"img/3-3.4831f34.png"},814:function(t,n,r){t.exports=r.p+"img/3-2.d63ce7b.png"},815:function(t,n,r){t.exports=r.p+"img/3-4.7fdd84f.png"},816:function(t,n,r){t.exports=r.p+"img/3-5.339baaa.png"},817:function(t,n,r){t.exports=r.p+"img/3-6.ee850ed.png"},818:function(t,n,r){t.exports=r.p+"img/3-7.4c3d5ac.jpg"}}]);