(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{1357:function(t,n){const e={render:function(){var t=this;t.$createElement;return t._self._c,t._m(0)},staticRenderFns:[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"frontmatter-markdown"},[e("h2",{attrs:{id:"背景"}},[t._v("背景")]),t._v(" "),e("p",[t._v("因为在开发 retsac，所以需要一个编程语言作为测试。最好是一个 "),e("strong",[e("em",[t._v("最小")])]),t._v(" 的编程语言，这样也便于教学和演示，以及日后的扩展")]),t._v(" "),e("p",[t._v("因为 LLVM 在 TypeScript 的生态里面似乎没有什么官方提供的 binding 库，所以使用 WASM 作为编译目标，使用 binaryen.js 生成 WASM")]),t._v(" "),e("h2",{attrs:{id:"符号表和变量声明"}},[t._v("符号表和变量声明")]),t._v(" "),e("h2",{attrs:{id:"循环"}},[t._v("循环")]),t._v(" "),e("p",[t._v("WASM 和汇编语言类似，没有结构化的循环语句，而是通过跳转/条件跳转的方式来实现")]),t._v(" "),e("p",[t._v("所以对于循环，我们需要划分好几个基本块出来。我们以 TypeScript 为例：")]),t._v(" "),e("pre",{staticClass:"language-ts"},[e("code",{pre:!0,attrs:{class:"language-ts"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nstatement2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("p",[t._v("可以被拆分为：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("block0: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("condition goto block2\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nblock1: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" condition goto block1\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nblock2: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("p",[t._v("所以一个 while 语句实现起来还是挺麻烦的。其实 do-while 语句更简单一些：")]),t._v(" "),e("pre",{staticClass:"language-ts"},[e("code",{pre:!0,attrs:{class:"language-ts"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstatement2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("p",[t._v("就可以拆分为：")]),t._v(" "),e("pre",{staticClass:"language-bash"},[e("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("block1: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" condition goto block1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nblock2: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  statement2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("p",[t._v("另外，WASM 里面可以通过"),e("code",{pre:!0},[t._v("br")]),t._v("实现类似"),e("code",{pre:!0},[t._v("goto")]),t._v("的效果。如果"),e("code",{pre:!0},[t._v("br")]),t._v("应用在"),e("code",{pre:!0},[t._v("loop")]),t._v("上，会跳转到"),e("code",{pre:!0},[t._v("loop")]),t._v("块的起始位置。如果"),e("code",{pre:!0},[t._v("br")]),t._v("应用在"),e("code",{pre:!0},[t._v("block")]),t._v("上，会跳转到"),e("code",{pre:!0},[t._v("block")]),t._v("块的末尾，这是"),e("code",{pre:!0},[t._v("loop/block")]),t._v("的一个很重要的区别")]),t._v(" "),e("h2",{attrs:{id:"垃圾回收与内存管理"}},[t._v("垃圾回收与内存管理")]),t._v(" "),e("p",[t._v("WASM 自身不需要/不提供垃圾回收，因为它根本无法动态申请内存，只能提供一块连续、可修改的内存。所以内存管理需要由 WASM 的调用者或外部环境提供")]),t._v(" "),e("p",[t._v("WASM 程序在写好的时候，就已经知道了它需要多大的内存空间。这里指的是 WASM 沙箱里面的内存空间。runtime 可以在沙箱外面进行内存管理，然后共享给 WASM 沙箱内部进行逻辑操作")]),t._v(" "),e("p",[t._v("资料：")]),t._v(" "),e("p",[t._v("https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory\nhttps://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md\nhttps://radu-matei.com/blog/practical-guide-to-wasm-memory/")])])}]};t.exports={attributes:{title:"DT0开发笔记",description:"年轻人的第一个编程语言"},vue:{render:e.render,staticRenderFns:e.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=e.render,this.$options.staticRenderFns=e.staticRenderFns}}}}}}]);