(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{1348:function(t,e){const n={render:function(){var t=this;t.$createElement;return t._self._c,t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"frontmatter-markdown"},[n("h2",{attrs:{id:"背景"}},[t._v("背景")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://discretetom.github.io/posts/steam-deck-as-bluetooth-joystick/"}},[t._v("前文")]),t._v(" 使用 python 成功读取了 SteamDeck 上面的手柄数据（摇杆+手柄按键）。但是 SteamDeck 的触摸板手感巨好，当然要想办法把它的数据给读到")]),t._v(" "),n("p",[t._v("方案：使用 Steam 官方的 SteamInput API，可以通过 Steam 客户端，设置输入映射。在 SteamDeck 上，就可以把触摸板映射为一些输入")]),t._v(" "),n("p",[t._v("所以我们需要一个集成了 Steamworks SDK 的软件。")]),t._v(" "),n("p",[t._v("我不想使用游戏引擎，毕竟我不需要高频渲染画面，但是需要高频读取输入（然后把输入传输出去）。写一个小而美的独立程序，性能应该会更好")]),t._v(" "),n("h2",{attrs:{id:"语言选型"}},[t._v("语言选型")]),t._v(" "),n("p",[t._v("头铁，用 Rust!")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/Noxime/steamworks-rs"}},[t._v("Rust bindings to the Steamworks SDK.")])]),t._v(" "),n("h2",{attrs:{id:"gui"}},[t._v("GUI")]),t._v(" "),n("p",[t._v("Steam Input 会把输入和窗口绑定，这就要求我们的程序必须有图形界面，不能是命令行程序")]),t._v(" "),n("h3",{attrs:{id:"webview失败"}},[t._v("WebView（失败）")]),t._v(" "),n("p",[t._v("用 WebView 做 GUI 当然最方便。但是经过测试，使用 WebView 的框架似乎并不能用")]),t._v(" "),n("p",[t._v("首先测试的当然是 "),n("a",{attrs:{href:"https://tauri.app/"}},[t._v("Tauri")]),t._v("，但是和 Electron 一样，它的进程模型是：一个核心进程，多个渲染进程。为了实现输入和窗口绑定，我们希望 Steam SDK 跑在渲染进程，研究了一下根据 Tauri 的渲染进程无法被注入自定义的 rust 代码，只能跑 JS。作罢。")]),t._v(" "),n("p",[t._v("然后测试了 "),n("a",{attrs:{href:"https://github.com/Boscop/web-view"}},[t._v("WebView")]),t._v("，它的文档里面没有进程模型，但是测试下来还是不行")]),t._v(" "),n("p",[t._v("所以就放弃 WebView 方案了")]),t._v(" "),n("h3",{attrs:{id:"iced"}},[t._v("Iced")]),t._v(" "),n("p",[t._v("最终选用的方案是 "),n("a",{attrs:{href:"https://github.com/iced-rs/iced"}},[t._v("Iced")])]),t._v(" "),n("h2",{attrs:{id:"steam-input"}},[t._v("Steam Input")]),t._v(" "),n("p",[t._v("调用 Steam Input 的时候有一些坑")]),t._v(" "),n("p",[t._v("首先，最好在初始化 client 之后，调用其他操作之前，周期性调用 "),n("code",{pre:!0},[t._v("run_callbacks")]),t._v("，以便 Steam SDK 刷新内部的状态。比如，在 "),n("code",{pre:!0},[t._v("get_connected_controllers")]),t._v(" 获取手柄之前，就要先调用 "),n("code",{pre:!0},[t._v("run_callbacks")]),t._v("，否则获取不到手柄。有时候一次调用还不够，需要多次调用，给 Steam SDK 一些时间去刷新状态。")]),t._v(" "),n("p",[t._v("同理，在调用 "),n("code",{pre:!0},[t._v("get_action_set_handle")]),t._v(" 等获取输入 schema 的函数之前，最好也多 poll 几次。如果 handle 是 0，那就是失败了")]),t._v(" "),n("h2",{attrs:{id:"在-steamdeck-上使用"}},[t._v("在 SteamDeck 上使用")]),t._v(" "),n("blockquote",[n("p",[t._v("在 SteamDeck 直接跑 exe 是不行的，系统会问如何打开")])]),t._v(" "),n("p",[t._v("iced build 出来的 exe 不能直接在 SteamDeck 上运行（即使作为非 steam 游戏添加到库）")]),t._v(" "),n("p",[t._v("在 windows 交叉编译 Linux 遇到了坑：iced 的依赖 winit 做字符串拼接的时候没考虑到交叉编译的情况（winit 的新版本似乎已经修复，但是 iced 用的老版本）")]),t._v(" "),n("pre",{staticClass:"language-bash"},[n("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("error: couldn't "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" C:"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x86_64-unknown-linux-musl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("release"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("winit-1bb9ae42956c757b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("out/fractional_scale_v1.rs: The system cannot "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" the "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" specified. "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os error "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" C:"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".cargo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("registry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("index.crates.io-6f17d22bba15001f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("winit-0.28.7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("platform_impl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("linux"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("wayland"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("protocols.rs:13:1\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" include"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("concat"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("env"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OUT_DIR"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/fractional_scale_v1.rs"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n")])]),t._v(" "),n("p",[t._v("只能在 steam deck 上面编译了。在 steam deck 上面配 rust 环境，vscode remote ssh")]),t._v(" "),n("blockquote",[n("p",[t._v("这次 vscode remote ssh 的体验比之前好很多，执行各种命令都巨快，可能是 SteamDeck 优化了相关功能")])]),t._v(" "),n("p",[t._v("注意把 Steam SDK 换成 Linux 平台的 SDK，并放到 path 里面（Linux 下即使是同一文件夹也可能找不到），比如 "),n("code",{pre:!0},[t._v("/usr/lib")])]),t._v(" "),n("p",[t._v("然后就可以成功执行了！在桌面模式点击就能执行。如果执行不了，或者闪退，开 terminal 执行，看报错信息")]),t._v(" "),n("p",[t._v("把 VDF 文件放到 "),n("code",{pre:!0},[t._v("/home/deck/.local/share/Steam/controller_config")]),t._v("，比如 "),n("code",{pre:!0},[t._v("game_actions_480.vdf")]),t._v("。然后执行程序，成功把它添加到库里面（当然是作为 SpaceWar），然后就可以编辑按键映射")]),t._v(" "),n("p",[t._v("至此，就可以成功在桌面模式启动此程序了")]),t._v(" "),n("p",[t._v("程序启动后，因为调用 SteamInput 所以手柄和 trackpad 的输入都会被捕获，也无法通过长按 Start 切换手柄模式。可以用触屏关闭应用")]),t._v(" "),n("h2",{attrs:{id:"成果"}},[t._v("成果")]),t._v(" "),n("p",[t._v("https://github.com/DiscreteTom/kontroller")])])}]};t.exports={attributes:{title:"Kontroller",description:"使用SteamInput读取SteamDeck的输入，包括trackpad"},vue:{render:n.render,staticRenderFns:n.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=n.render,this.$options.staticRenderFns=n.staticRenderFns}}}}}}]);