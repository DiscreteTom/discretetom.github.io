(window.webpackJsonp=window.webpackJsonp||[]).push([[37,383,384,385,386,387,388,389,390],{1277:function(_,v,t){const l={render:function(){var _=this;_.$createElement;return _._self._c,_._m(0)},staticRenderFns:[function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("div",{staticClass:"frontmatter-markdown"},[l("h2",{attrs:{id:"概述"}},[_._v("概述")]),_._v(" "),l("p",[_._v("三维实体的表示法需要考虑的两点：")]),_._v(" "),l("ul",[l("li",[_._v("表示法的覆盖域，即这种表示法能够定义的物体的大小")]),_._v(" "),l("li",[_._v("表示法蕴含的信息的完整性")])]),_._v(" "),l("h2",{attrs:{id:"边界表示法"}},[_._v("边界表示法")]),_._v(" "),l("h3",{attrs:{id:"概述-1"}},[_._v("概述")]),_._v(" "),l("p",[_._v("使用顶点、棱边、表面表示物体。")]),_._v(" "),l("p",[_._v("特点：")]),_._v(" "),l("ul",[l("li",[_._v("包含两方面信息\n"),l("ul",[l("li",[_._v("几何信息 - 物体大小、尺寸、位置、形状等")]),_._v(" "),l("li",[_._v("拓扑信息 - 顶点、边、面的连接关系")])])]),_._v(" "),l("li",[_._v("集合信息和拓扑信息分离表示")])]),_._v(" "),l("p",[l("img",{attrs:{src:t(556),alt:""}})]),_._v(" "),l("p",[_._v("优点：")]),_._v(" "),l("ul",[l("li",[_._v("便于查询物体中的元素以获取信息")]),_._v(" "),l("li",[_._v("容易支持各种局部操作")]),_._v(" "),l("li",[_._v("对于具有相同拓扑结构、仅大小、尺寸不同的物体，可以使用统一的数据结构加以表示")]),_._v(" "),l("li",[_._v("便于在数据结构上附加各种非几何信息")])]),_._v(" "),l("h3",{attrs:{id:"翼边结构"}},[_._v("翼边结构")]),_._v(" "),l("p",[_._v("边界表示法的一种存储结构")]),_._v(" "),l("p",[_._v("对于每条棱边e，保存：")]),_._v(" "),l("ul",[l("li",[_._v("e的两个顶点P1和P2")]),_._v(" "),l("li",[_._v("e邻接的两个表面的环Loop1和Loop2")]),_._v(" "),l("li",[_._v("四条相邻棱边\n"),l("ul",[l("li",[_._v("\\(E_{rcc}\\) - 右环逆时针第一条边(right counter-clockwise)")]),_._v(" "),l("li",[_._v("\\(E_{rcw}\\) - 右环顺时针第一条边(right clockwise)")]),_._v(" "),l("li",[_._v("\\(E_{lcw}\\) - 左环顺时针第一条边")]),_._v(" "),l("li",[_._v("\\(E_{lcc}\\) - 左环逆时针第一条边")])])])]),_._v(" "),l("p",[l("img",{attrs:{src:t(557),alt:""}})]),_._v(" "),l("h3",{attrs:{id:"描述拓扑关系"}},[_._v("描述拓扑关系")]),_._v(" "),l("p",[_._v("以面为中心，三种方案：")]),_._v(" "),l("ul",[l("li",[_._v("保存与目标面相邻的面")]),_._v(" "),l("li",[_._v("保存目标面的顶点")]),_._v(" "),l("li",[_._v("保存目标面的边")])]),_._v(" "),l("p",[l("img",{attrs:{src:t(558),alt:""}})]),_._v(" "),l("p",[_._v("以顶点为中心，三种方案：")]),_._v(" "),l("ul",[l("li",[_._v("保存与目标顶点相关的面")]),_._v(" "),l("li",[_._v("保存相邻顶点")]),_._v(" "),l("li",[_._v("保存相关的边")])]),_._v(" "),l("p",[l("img",{attrs:{src:t(559),alt:""}})]),_._v(" "),l("p",[_._v("同理，以边为中心，三种方案：")]),_._v(" "),l("p",[l("img",{attrs:{src:t(560),alt:""}})]),_._v(" "),l("p",[_._v("以上九种关系可以通过数学计算转换")]),_._v(" "),l("h3",{attrs:{id:"使用欧拉运算构造体"}},[_._v("使用欧拉运算构造体")]),_._v(" "),l("p",[_._v("用户先输入点，然后建立边，左后构成面，形成体")]),_._v(" "),l("p",[_._v("要求点、边、面满足拓扑一致性和几何一致性")]),_._v(" "),l("p",[l("strong",[_._v("拓扑一致性欧拉公式")]),_._v("：\\(v-e+f-r=2(s-h)\\)")]),_._v(" "),l("ul",[l("li",[_._v("v - 顶点数")]),_._v(" "),l("li",[_._v("e - 棱边数")]),_._v(" "),l("li",[_._v("f - 面数")]),_._v(" "),l("li",[_._v("r - 物体表面边界内环数")]),_._v(" "),l("li",[_._v("s - 不相连的物体个数")]),_._v(" "),l("li",[_._v("h - 物体上通孔数")])]),_._v(" "),l("p",[_._v("例：如下几何体")]),_._v(" "),l("p",[l("img",{attrs:{src:t(561),alt:""}})]),_._v(" "),l("p",[_._v("它的属性：")]),_._v(" "),l("ul",[l("li",[_._v("v=16")]),_._v(" "),l("li",[_._v("e=24")]),_._v(" "),l("li",[_._v("f=10")]),_._v(" "),l("li",[_._v("r=2")]),_._v(" "),l("li",[_._v("s=1")]),_._v(" "),l("li",[_._v("h=1")])]),_._v(" "),l("p",[_._v("6个变量满足的关系可以在高维空间中定义一个面。任何三维物体比如是此高维面上的一个网格点")]),_._v(" "),l("p",[_._v("造型的过程：从高维空间原点触发，一步一步走到目标点，以构造所需的立体")]),_._v(" "),l("h2",{attrs:{id:"体素构造表示法"}},[_._v("体素构造表示法")]),_._v(" "),l("h3",{attrs:{id:"概述-2"}},[_._v("概述")]),_._v(" "),l("p",[_._v("把物体定义为三维空间中点的正则集合\\(rX=kiX\\)，其中")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("X为三维点集")])]),_._v(" "),l("li",[l("p",[_._v("r为正则化算子")])]),_._v(" "),l("li",[l("p",[_._v("k/i表示点集的闭包和内部")])]),_._v(" "),l("li",[l("p",[_._v("bX表示X的边界")])]),_._v(" "),l("li",[l("p",[_._v("cX表示X的外部")])])]),_._v(" "),l("p",[l("strong",[_._v("正则化")]),_._v(" - 取点集的内部，并使用一张边界把它包围起来")]),_._v(" "),l("p",[_._v("限制：")]),_._v(" "),l("ul",[l("li",[_._v("物体必须是封闭的，有一定的体积")]),_._v(" "),l("li",[_._v("物体中不允许存在孤立点、悬挂的线或面")])]),_._v(" "),l("h3",{attrs:{id:"正则集合运算"}},[_._v("正则集合运算")]),_._v(" "),l("ul",[l("li",[_._v("正则并 \\(A\\bigcup ^*B=r(A\\bigcup B)\\)")]),_._v(" "),l("li",[_._v("正则交 \\(A\\bigcap ^*B=r(A\\bigcap B)\\)")]),_._v(" "),l("li",[_._v("正则差 \\(A- ^*B=r(A-B)\\)")])]),_._v(" "),l("p",[_._v("其中r表示正则化算子。正则物体经过正则运算结果仍然是正则物体")]),_._v(" "),l("p",[_._v("正则集合运算后产生的新物体边界是原两个物体边界并集的一个子集，即\\(b(A ? B) \\subset (bA \\bigcup bB)\\)，其中"),l("code",{pre:!0},[_._v("?")]),_._v("表示任意操作")]),_._v(" "),l("p",[_._v("已知A、B两个物体，因为他们是正则点集，所以:")]),_._v(" "),l("ul",[l("li",[_._v("\\(A = bA \\bigcup iA\\)")]),_._v(" "),l("li",[_._v("\\(B = bB \\bigcup iB\\)")])]),_._v(" "),l("p",[_._v("边界公式：")]),_._v(" "),l("ul",[l("li",[_._v("\\(b(A \\bigcap^* B) = (bA \\bigcap iB) \\bigcup (bB \\bigcup iA) \\bigcup (bA \\bigcap bB \\bigcap k(iA \\bigcap iB))\\)")]),_._v(" "),l("li",[_._v("\\(b(A \\bigcup^* B) = (bA \\bigcap cB) \\bigcup (bB \\bigcup cA) \\bigcup (bA \\bigcap bB \\bigcap k(cA \\bigcap cB))\\)")]),_._v(" "),l("li",[_._v("\\(b(A -^* B) = (bA \\bigcap cB) \\bigcup (bB \\bigcup iA) \\bigcup (bA \\bigcap bB \\bigcap k(iA \\bigcap cB))\\)")])]),_._v(" "),l("h3",{attrs:{id:"csg树"}},[_._v("CSG树")]),_._v(" "),l("p",[_._v("Constructive Solid Geometry树")]),_._v(" "),l("p",[_._v("复杂物体可以由简单、规则物体通过布尔运算得到，从而构成一棵树。树的叶节点为基本体素（立方体、圆柱、圆锥等），中间节点为正则集合运算")]),_._v(" "),l("p",[l("img",{attrs:{src:t(562),alt:""}})]),_._v(" "),l("p",[_._v("CSG树的结点数据结构：")]),_._v(" "),l("p",[l("img",{attrs:{src:t(563),alt:""}})]),_._v(" "),l("p",[_._v("CSG树的特点：")]),_._v(" "),l("ul",[l("li",[_._v("仅定义物体构造方式，不保存点、边、面等边界信息，也没有拓扑关系")]),_._v(" "),l("li",[_._v("易于表达复杂物体")]),_._v(" "),l("li",[_._v("适合采用分治算法（因为是二叉树），递归即可生成图形")])]),_._v(" "),l("h2",{attrs:{id:"八叉树表示法"}},[_._v("八叉树表示法")]),_._v(" "),l("h3",{attrs:{id:"空间位置枚举法"}},[_._v("空间位置枚举法")]),_._v(" "),l("p",[_._v("使用此方法需要把空间分割为均匀立方体网格（把物体三维离散化")]),_._v(" "),l("p",[_._v("使用的数据结构为三维数组")]),_._v(" "),l("p",[_._v("\\[\ns(i, j, k) = \n\\begin{cases}\n1, & \\text{位置(i, j, k)被物体占据}\\\\\n0, & \\text{otherwise}\n\\end{cases}\n\\]")]),_._v(" "),l("p",[_._v("数组的大小取决于空间分辨率")]),_._v(" "),l("p",[_._v("优点 - 适用于所有形状。易于实现物体的并交差运算与整体性质运算（基于数组运算")]),_._v(" "),l("p",[_._v("缺点 - 没有明确的边界信息。存储量大")]),_._v(" "),l("p",[_._v("使用八叉树可以有效实现空间位置枚举")]),_._v(" "),l("h3",{attrs:{id:"八叉树概述"}},[_._v("八叉树概述")]),_._v(" "),l("ol",[l("li",[_._v("定义一个能够包含所表示物体的立方体，边长为\\(2^n\\)（因为等会需要二等分")]),_._v(" "),l("li",[_._v("如果立方体空间没有被目标物体完全占据，则把立方体等分为8份，编号为0-7")]),_._v(" "),l("li",[_._v("如果子立方体也没有被完全占据，继续分。如果完全没有被占据，标记为EMPTY，如果完全被占据，标记FULL。被部分占据，标记PARTIAL")]),_._v(" "),l("li",[_._v("数据结构不存在PARTIAL时分割结束")])]),_._v(" "),l("p",[_._v("优点：")]),_._v(" "),l("ul",[l("li",[_._v("集合运算简单，遍历即可")]),_._v(" "),l("li",[_._v("简化了隐藏线与隐藏面的消除（通过排序实现，优先显示最靠近摄像机的子立方体")]),_._v(" "),l("li",[_._v("计算体积、质量简单")])]),_._v(" "),l("p",[_._v("缺点：")]),_._v(" "),l("ul",[l("li",[_._v("存储量大，物体表示复杂\n"),l("ul",[l("li",[_._v("每个节点有10个域：8个子树域、一个父节点域、一个自身信息域")])])]),_._v(" "),l("li",[_._v("以存储空间换算法效率")])]),_._v(" "),l("h3",{attrs:{id:"线性八叉树"}},[_._v("线性八叉树")]),_._v(" "),l("p",[_._v("为了"),l("strong",[_._v("减少八叉树的存储量")]),_._v("，使用长度可变的一维数组保存八叉树（仅保存终结点）")]),_._v(" "),l("p",[_._v("每个节点在八叉树中的位置可以使用一个八进制数表示：\\(Q = q_{m-1}8^{m-1} + q_{m-2}8^{m-2} + \\cdots + q_08^0\\)，其中\\(q_0\\)是该节点在兄弟之间的序号（0-7），\\(q_1\\)是父节点在同辈之间的序号")]),_._v(" "),l("h2",{attrs:{id:"其他立体造型方案"}},[_._v("其他立体造型方案")]),_._v(" "),l("h3",{attrs:{id:"基本体例表示法"}},[_._v("基本体例表示法")]),_._v(" "),l("p",[_._v("使用参数描述形状类似大小不同的物体，比如描述一个圆柱体，使用半径和高两个参数描述")]),_._v(" "),l("p",[_._v("只能描述已有的内置物体")]),_._v(" "),l("p",[_._v("适用于工业上已经定型的标准件。局限性大")]),_._v(" "),l("h3",{attrs:{id:"单元分解法"}},[_._v("单元分解法")]),_._v(" "),l("p",[_._v("克服空间枚举法的缺点，允许将物体表示成形状相同大小不同的体积单元（不一定是立方体")]),_._v(" "),l("p",[_._v("节省了存储量，但是数据结构更复杂了")]),_._v(" "),l("h3",{attrs:{id:"推移法"}},[_._v("推移法")]),_._v(" "),l("p",[_._v("又称"),l("strong",[_._v("扫移法")])]),_._v(" "),l("p",[_._v("根据二维或三维物体按照某种规则移动时的轮廓定义另一物体")]),_._v(" "),l("p",[_._v("适合生成工业旋转体")])])}]};_.exports={attributes:{layout:"collection",title:"三维实体的造型",collection:"ComputerGraphics"},vue:{render:l.render,staticRenderFns:l.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(_){return this.templateRender?this.templateRender():_("div","Rendering")},created:function(){this.templateRender=l.render,this.$options.staticRenderFns=l.staticRenderFns}}}}},556:function(_,v,t){_.exports=t.p+"img/7-1.e420fcd.png"},557:function(_,v,t){_.exports=t.p+"img/7-2.2c4b11c.png"},558:function(_,v,t){_.exports=t.p+"img/7-3.906cbf5.png"},559:function(_,v,t){_.exports=t.p+"img/7-4.fb729e4.png"},560:function(_,v,t){_.exports=t.p+"img/7-5.3b5225a.png"},561:function(_,v,t){_.exports=t.p+"img/7-6.5d8aac6.png"},562:function(_,v,t){_.exports=t.p+"img/7-7.0d80021.png"},563:function(_,v,t){_.exports=t.p+"img/7-8.e2e1d18.png"}}]);