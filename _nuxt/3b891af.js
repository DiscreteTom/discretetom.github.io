(window.webpackJsonp=window.webpackJsonp||[]).push([[107,402],{1342:function(t,n,e){const r={render:function(){var t=this;t.$createElement;return t._self._c,t._m(0)},staticRenderFns:[function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("div",{staticClass:"frontmatter-markdown"},[r("h2",{attrs:{id:"设计"}},[t._v("设计")]),t._v(" "),r("p",[t._v("由于 HyperStudio v1 使用的 uDesktopDuplication 无法运行在独立显卡上，所以 HyperDesktopDuplication 计划使用两个进程来实现：")]),t._v(" "),r("ul",[r("li",[t._v("后台进程仍然使用 Windows Desktop Duplication API 来捕获桌面数据，但是使用共享内存来保存桌面数据")]),t._v(" "),r("li",[t._v("Unity 进程读取共享内存，渲染到 Unity 里面")])]),t._v(" "),r("h2",{attrs:{id:"rusty-duplication"}},[t._v("rusty-duplication")]),t._v(" "),r("p",[t._v("uDesktopDuplication 使用 C++ 进行开发，但是我已经不想再写 C++ 了。为了安全高效，决定使用 Rust 语言调用 Windows API 重写桌面复制的功能")]),t._v(" "),r("p",[t._v("为了可复用性，我把捕获桌面数据的库单独抽出来，放到了 "),r("a",{attrs:{href:"https://github.com/DiscreteTom/rusty-duplication"}},[t._v("rusty-duplication")]),t._v("，并且 rusty-duplication 也提供了多层 API，以便以后可以在不同的场景下使用")]),t._v(" "),r("p",[t._v("rusty-duplication 主要参考了这几个项目：")]),t._v(" "),r("ul",[r("li",[t._v("https://github.com/bryal/dxgcap-rs")]),t._v(" "),r("li",[t._v("https://github.com/hecomi/uDesktopDuplication")])]),t._v(" "),r("p",[t._v("但是使用的是 Windows 官方的 "),r("a",{attrs:{href:"https://github.com/microsoft/windows-rs"}},[t._v("windows")]),t._v(" 库。这个库之前并没有被广泛使用，但是是官方库，所以还是顶着很多问题使用了这个库，甚至还给提了个 issue（微软修 BUG 速度还挺快）")]),t._v(" "),r("h3",{attrs:{id:"windows-desktop-duplication-api"}},[t._v("Windows Desktop Duplication API")]),t._v(" "),r("p",[t._v("因为自己调用了 Windows Desktop Duplication API，所以这里也写一个总结")]),t._v(" "),r("p",[t._v("要调用 Windows Desktop Duplication API，首先需要创建一个"),r("code",{pre:!0},[t._v("IDXGIFactory")]),t._v("（一个用来获取 Adapter 的工厂），然后通过"),r("code",{pre:!0},[t._v("EnumAdapters")]),t._v("获取到"),r("code",{pre:!0},[t._v("IDXGIAdapter")]),t._v("，然后通过"),r("code",{pre:!0},[t._v("EnumOutputs")]),t._v("获取到"),r("code",{pre:!0},[t._v("IDXGIOutput")]),t._v("（因为一个 Adapter 可能有多个 Output），然后通过"),r("code",{pre:!0},[t._v("DuplicateOutput")]),t._v("获取到"),r("code",{pre:!0},[t._v("IDXGIOutputDuplication")]),t._v("。需要注意这些流程都是在获取元数据，并没有开始捕获桌面数据，所以没有太大的开销。在 rusty-duplication 中，使用 Manager 来初始化并管理这些对象")]),t._v(" "),r("p",[t._v("当我们确定需要开始复制桌面的时候，首先通过"),r("code",{pre:!0},[t._v("AcquireNextFrame")]),t._v("获取到"),r("code",{pre:!0},[t._v("IDXGIResource")]),t._v("，然后通过"),r("code",{pre:!0},[t._v("QueryInterface")]),t._v("获取到"),r("code",{pre:!0},[t._v("ID3D11Texture2D")]),t._v("（在 GPU 上）。需要注意：我们需要把这个 texture2D 复制一份，然后把原本的 texture2D 释放调，以免影响操作系统正常渲染画面。所以要先调用"),r("code",{pre:!0},[t._v("CreateTexture2D")]),t._v("创建一个可读的 texture，然后通过"),r("code",{pre:!0},[t._v("CopyResource")]),t._v("复制这个 GPU 资源。这个 Texture2D 可以被缓存，以避免重复创建/删除。")]),t._v(" "),r("p",[t._v("最后，可以通过"),r("code",{pre:!0},[t._v("ID3D11Texture2D")]),t._v("的"),r("code",{pre:!0},[t._v("Map")]),t._v("方法获取到桌面数据，保存在我们想保存的位置（比如共享内存）")]),t._v(" "),r("p",[t._v("需要注意：这样捕获的画面是不包含鼠标的，所以鼠标需要额外捕获，然后渲染到画面上。在 Unity3D 里面，可以分别渲染鼠标和桌面，这样如果只有鼠标移动了，就不用刷新整个桌面了。这也是 HyperDesktopDuplication 相对于 uDesktopDuplication 的一个优化")]),t._v(" "),r("p",[t._v("另外，捕获鼠标需要在 "),r("code",{pre:!0},[t._v("ReleaseFrame")]),t._v(" 之前，否则会导致鼠标捕获失败")]),t._v(" "),r("p",[t._v("最后，虽然 Rust 提供了语法糖 "),r("code",{pre:!0},[t._v("?")]),t._v(" 来实现 "),r("code",{pre:!0},[t._v("Err")]),t._v(" 的快速 "),r("code",{pre:!0},[t._v("Return")]),t._v("，但是很多成对出现的 API 是需要释放一些资源的，比如 "),r("code",{pre:!0},[t._v("AcquireNextFrame")]),t._v(" 和 "),r("code",{pre:!0},[t._v("ReleaseFrame")]),t._v("。如果在 "),r("code",{pre:!0},[t._v("AcquireNextFrame")]),t._v(" 之后出现了 "),r("code",{pre:!0},[t._v("Err")]),t._v("，是不能简单地使用 "),r("code",{pre:!0},[t._v("?")]),t._v(" 直接返回的，需要 "),r("code",{pre:!0},[t._v("ReleaseFrame")]),t._v(" 再返回")]),t._v(" "),r("h2",{attrs:{id:"高-dpi-和屏幕尺寸"}},[t._v("高 DPI 和屏幕尺寸")]),t._v(" "),r("p",[t._v("通过 "),r("code",{pre:!0},[t._v("DXGI_OUTPUT_DESC")]),t._v(" 可以得到显示器在系统设置里面的位置 (top/bottom/left/right)，但是这个最好只用来定位以及在渲染的时候判断屏幕大小，不要用它来确定屏幕的像素数量！")]),t._v(" "),r("p",[t._v("在高 DPI 下，使用 "),r("code",{pre:!0},[t._v("bottom - top")]),t._v(" 或者 "),r("code",{pre:!0},[t._v("right - left")]),t._v(" 得到的像素数量是不正确的。使用 "),r("code",{pre:!0},[t._v("DXGI_OUTDUPL_DESC")]),t._v(" 中的 "),r("code",{pre:!0},[t._v("ModeDesc")]),t._v(" 可以得到正确的像素数量")]),t._v(" "),r("h2",{attrs:{id:"shremdup"}},[t._v("shremdup")]),t._v(" "),r("p",[t._v("有了基础库 rusty-duplication 之后，我们需要一个可执行程序来捕获桌面数据，并且把桌面数据保存到共享内存中，并且使用 RPC/IPC 和外界交互。这个程序就是 shremdup (shared-memory desktop-duplication)")]),t._v(" "),r("p",[t._v("一开始，shremdup 使用 HTTP 实现 RPC，但是希望有更好的性能，所以后来改成了 gRPC")]),t._v(" "),r("p",[t._v("shremdup 主要解决的问题是：把 API 通过 gRPC 的方式暴露出去，并且保证不会有多个请求互相干扰。为了实现这个目标，shremdup 使用了一个锁，这个锁在每次请求开始的时候被锁住，请求结束的时候被释放。这样就可以保证不会有多个请求同时进行。并且，为了实现不同的线程都可以访问 rusty-duplication 的 "),r("code",{pre:!0},[t._v("Manager")]),t._v("，使用了 rust 中的 channel 机制来实现跨进程传输。以下是一段核心示例代码：")]),t._v(" "),r("pre",{staticClass:"language-bash"},[r("code",{pre:!0,attrs:{class:"language-bash"}},[t._v("async fn list_displays"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("self,\n  _request: Request"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ListDisplaysRequest"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(",\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Result"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Response"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ListDisplaysReply"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(", Status"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" mut guard "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self.mutex.lock"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".await"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("guard.0"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".send"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ShremdupRequest::ListDisplays"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".await "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Status::internal"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err.to_string"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  match "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("guard.1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".recv"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".await "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    None "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Status::internal"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"failed to receive reply"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(",\n    Some"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ShremdupReply::ListDisplays"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ok"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("infos"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Ok"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Response::new"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListDisplaysReply "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" infos "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    Some"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ShremdupReply::ListDisplays"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Status::internal"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err.to_string"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",\n    Some"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Err"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Status::internal"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invalid reply"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(",\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),r("p",[t._v("Shremdup 和 rusty-duplication 解耦，所以如果希望使用其他 RPC 方式（比如 HTTP）调用 rusty-duplication，只需要实现一个类似 shremdup 的程序即可")]),t._v(" "),r("p",[t._v("Shremdup 和前端程序也是解耦的，只是通过 RPC 通信，所以如果未来想在其他游戏引擎（比如 UE）里面调用 shremdup 也是可行的")]),t._v(" "),r("h2",{attrs:{id:"frontend"}},[t._v("frontend")]),t._v(" "),r("p",[t._v("最后，我们只需要在 Unity3D 里面实现三个功能：")]),t._v(" "),r("ol",[r("li",[t._v("通过 gRPC 调用 shremdup")]),t._v(" "),r("li",[t._v("通过共享内存访问桌面数据并渲染")]),t._v(" "),r("li",[t._v("绘制鼠标")])]),t._v(" "),r("h3",{attrs:{id:"grpc-in-unity"}},[t._v("gRPC in Unity")]),t._v(" "),r("p",[t._v("万万没想到，给 Unity3D 配置 gRPC 特别麻烦。早期 gRPC 有一个 unity 插件，但是现在已经不维护了，而且也不支持.net core。所以我们只能自己动手了")]),t._v(" "),r("ol",[r("li",[t._v("安装 Unity3D 插件：https://github.com/GlitchEnzo/NuGetForUnity ，这个插件让我们可以在 Unity3D 里面使用 NuGet\n"),r("ol",[r("li",[t._v("当然，也可以不用这个插件，直接在命令行里面用 NuGet 下载依赖，然后把依赖放到 Unity3D 项目里面")])])]),t._v(" "),r("li",[t._v("通过 NuGet，安装："),r("code",{pre:!0},[t._v("Google.Protobuf")]),t._v("和"),r("code",{pre:!0},[t._v("Grpc")]),t._v(".")]),t._v(" "),r("li",[t._v("通过 NuGet 安装的"),r("code",{pre:!0},[t._v("Grpc")]),t._v("缺少一个"),r("code",{pre:!0},[t._v("grpc_csharp_ext.dll")]),t._v("文件，我们需要手动从"),r("a",{attrs:{href:"https://www.nuget.org/packages/Grpc.Core"}},[t._v("这里")]),t._v("下载 Grpc 的包，然后把里面的"),r("code",{pre:!0},[t._v("runtimes")]),t._v("文件夹里面的"),r("code",{pre:!0},[t._v("grpc_csharp_ext.x64.dll")]),t._v("放到 Assets/Plugins/x64 里面，并重命名为"),r("code",{pre:!0},[t._v("grpc_csharp_ext.dll")]),t._v("。然后在 Unity3D 里面把这个文件设置为"),r("code",{pre:!0},[t._v("Load on startup")]),t._v("，这样就可以在 Unity3D 里面使用 gRPC 了\n"),r("ol",[r("li",[t._v("如果你的 PC 不是 x64，请使用对应的版本")])])]),t._v(" "),r("li",[t._v("访问 https://packages.grpc.io/ ，在最新的 build 里面，下载 gRPC protoc Plugins")]),t._v(" "),r("li",[t._v("在"),r("code",{pre:!0},[t._v("proto")]),t._v("文件所在的文件夹，执行 "),r("code",{pre:!0},[t._v('protoc --csharp_out=. --grpc_out=. --plugin=protoc-gen-grpc="xxx\\grpc_csharp_plugin.exe" xxx.proto')]),t._v("就可以生成 C# 代码了")]),t._v(" "),r("li",[t._v("最后，把生成的 C# 代码放到 Unity3D 项目里面，就可以使用 gRPC 了")])]),t._v(" "),r("h3",{attrs:{id:"共享内存"}},[t._v("共享内存")]),t._v(" "),r("p",[t._v("如果是跨进程访问共享内存，需要共享内存的名字以"),r("code",{pre:!0},[t._v("Global\\")]),t._v("开头，并且要有管理员权限，否则只能在同一个进程里面访问")]),t._v(" "),r("p",[t._v("另外，如果使用"),r("code",{pre:!0},[t._v("DllImport")]),t._v("调用 Windows API，那么"),r("code",{pre:!0},[t._v("GetLastError")]),t._v("的返回值可能是不正确的。C# 调用 Win API 需要用"),r("code",{pre:!0},[t._v('[DllImport("xxx.dll", SetLastError = true)]')]),t._v("启用"),r("code",{pre:!0},[t._v("SetLastError")]),t._v("，然后使用"),r("code",{pre:!0},[t._v("Marshal.GetLastWin32Error()")]),t._v("获取错误码。直接调用 Windows 的"),r("code",{pre:!0},[t._v("GetLastError()")]),t._v("会返回"),r("code",{pre:!0},[t._v("0")]),t._v("或其他不确定的值。参考"),r("a",{attrs:{href:"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute.setlasterror?view=net-7.0"}},[t._v("windows 官方文档")])]),t._v(" "),r("p",[t._v("只有创建 Global 共享内存的进程需要是管理员，访问贡献内存的不需要管理员权限")]),t._v(" "),r("p",[t._v("另外，可以使用操作系统自带的 Resource Monitor 查看创建出来的共享内存的名称")]),t._v(" "),r("p",[t._v("在 Rust 中直接调用 Windows API 创建共享内存还需要注意: Rust 自身的"),r("code",{pre:!0},[t._v("String")]),t._v("和"),r("code",{pre:!0},[t._v("&str")]),t._v("是不是以"),r("code",{pre:!0},[t._v("\\0")]),t._v("结尾的，所以需要手动转换成 C 风格的 string（添加"),r("code",{pre:!0},[t._v("\\0")]),t._v("），否则会导致创建出来的共享内存名称不正确")]),t._v(" "),r("h3",{attrs:{id:"绘制鼠标"}},[t._v("绘制鼠标")]),t._v(" "),r("p",[t._v("HyperDesktopDuplication 把桌面的绘制和鼠标的绘制分开了，所以我们需要自己绘制鼠标。官方的示例都是使用 C++写的，并且是直接把鼠标绘制在了桌面上，所以我们需要理解一下 Windows 的 API 设计，然后按照我们自己的需求来画鼠标")]),t._v(" "),r("p",[t._v("鼠标形状有 3 种")]),t._v(" "),r("blockquote",[r("p",[t._v("https://learn.microsoft.com/en-us/windows/win32/api/dxgi1_2/ne-dxgi1_2-dxgi_outdupl_pointer_shape_type")])]),t._v(" "),r("h4",{attrs:{id:"monochrome"}},[t._v("MONOCHROME")]),t._v(" "),r("p",[t._v("在这个模式下，鼠标像素只有两种颜色：黑/白。当然，还可以是透明。这个模式似乎只有一些特别老旧的鼠标形状在使用。在 Win11 中，记事本里面的反向鼠标（在一行的左边，用来选择一整行）就是这个模式。可以看到分辨率也不是很高")]),t._v(" "),r("p",[r("img",{attrs:{src:e(490),alt:""}})]),t._v(" "),r("p",[t._v("既然是黑/白/透明，三种状态，我们就需要 2 bit 来保存这个信息。微软的官方文档写的非常晦涩难懂：")]),t._v(" "),r("blockquote",[r("p",[t._v("The pointer type is a monochrome mouse pointer, which is a monochrome bitmap. The bitmap’s size is specified by width and height in a 1 bits per pixel (bpp) device independent bitmap (DIB) format AND mask that is followed by another 1 bpp DIB format XOR mask of the same size.")])]),t._v(" "),r("p",[t._v("使用了两个 mask，但是其实思考一下就会发现：")]),t._v(" "),r("ul",[r("li",[t._v("AND mask 为 1 并且 XOR mask 为 1：反转桌面像素。这个应该用不到")]),t._v(" "),r("li",[t._v("AND mask 为 1 并且 XOR mask 为 0：鼠标像素和桌面像素相同，相当于是透明")]),t._v(" "),r("li",[t._v("AND mask 为 0 并且 XOR mask 为 1：不管桌面像素如何，鼠标像素为白色")]),t._v(" "),r("li",[t._v("AND mask 为 0 并且 XOR mask 为 0：不管桌面像素如何，鼠标像素为黑色")])]),t._v(" "),r("p",[t._v("所以我们甚至不需要读取桌面像素，就可以完成鼠标的绘制（毕竟只有黑/白/透明三种状态，逻辑上也不应该需要读取桌面像素）")]),t._v(" "),r("pre",{staticClass:"language-cs"},[r("code",{pre:!0,attrs:{class:"language-cs"}},[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IMPORTANT: masks only affect RGB, not A")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("andMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xorMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if AND and XOR: (any AND 1) XOR 1 => invert any, this shouldn't happen")]),t._v("\n  Logger"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AND and XOR: any xor 1 == invert, this shouldn\'t happen"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("andMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xorMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if AND and not XOR: (any AND 1) XOR 0 => any, transparent")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// just set alpha to 0")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("andMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xorMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if not AND and XOR: (any AND 0) XOR 1 => 1, all one, white")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("andMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xorMask "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if not AND and not XOR: (any AND 0) XOR 0 == 0, all zero, black")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A is not affected by masks")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  textureBuffer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),r("p",[t._v("另外，因为有两个 mask，所以 "),r("code",{pre:!0},[t._v("PointerShape")]),t._v(" 里面的 "),r("code",{pre:!0},[t._v("Height")]),t._v(" 并不是鼠标图案是实际高度，而是两倍高度！所以我们需要把它除以 2。微软文档都没写这个！")]),t._v(" "),r("pre",{staticClass:"language-cs"},[r("code",{pre:!0,attrs:{class:"language-cs"}},[r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" cursorTexture "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Texture2D")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Width"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TextureFormat"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ARGB32"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("h4",{attrs:{id:"color"}},[t._v("COLOR")]),t._v(" "),r("p",[t._v("这个模式最简单，因为系统 API 返回的就是一个 ARGB32 的数据，直接创建 texture 然后设置像素就可以了")]),t._v(" "),r("pre",{staticClass:"language-cs"},[r("code",{pre:!0,attrs:{class:"language-cs"}},[r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" cursorTexture "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Texture2D")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Width"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Height"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TextureFormat"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ARGB32"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncursorTexture"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetPixelData")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToByteArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncursorTexture"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Apply")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("h4",{attrs:{id:"masked_color"}},[t._v("MASKED_COLOR")]),t._v(" "),r("p",[t._v("这个模式下，鼠标的颜色要么是一个 ARGB32 的颜色，要么是和桌面重叠像素的异或值。所以我们需要读取桌面像素，然后和鼠标像素做异或运算")]),t._v(" "),r("p",[t._v("通常文本编辑器里面的鼠标就是这个模式（形状类似大写的"),r("code",{pre:!0},[t._v("I")]),t._v("的那个）")]),t._v(" "),r("p",[t._v("实验了之后发现，如果鼠标像素是一个 ARGB32 的颜色，基本上和桌面的像素颜色相同，也就是说它其实是透明")]),t._v(" "),r("p",[t._v("需要注意：只有这个模式的鼠标需要频繁更新，因为要和桌面像素做异或运算，所以一旦桌面更新、鼠标位置更新，就需要重新绘制鼠标。其他模式的鼠标只需要在鼠标形状变化的时候更新一次就可以了")]),t._v(" "),r("pre",{staticClass:"language-cs"},[r("code",{pre:!0,attrs:{class:"language-cs"}},[r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" raw "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToByteArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Length"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" cursorPixelIndex "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" desktopX "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cursorPixelIndex "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Width"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mousePixelPosition"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Item1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" desktopY "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cursorPixelIndex "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("shape"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Width"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mousePixelPosition"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Item2"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" desktopPixelOffset "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" desktopX "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("desktopY "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pixelWidth"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" desktopPixelAddress "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" desktopPixelOffset "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// desktop pixel")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token class-name"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")])]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// desktop pixel format is BGRA")]),t._v("\n    b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("desktopPixelAddress"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    g "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("desktopPixelAddress "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("desktopPixelAddress "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFF")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// XOR with the desktop pixel")]),t._v("\n    raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" g"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// else: transparent, just keep the the alpha channel `raw[i]` to 0")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncursorTexture"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetPixelData")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("raw"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncursorTexture"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Apply")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}]};t.exports={attributes:{title:"HyperDesktopDuplication开发笔记",description:"用来解决 HyperStudio V1 无法使用独立显卡的问题"},vue:{render:r.render,staticRenderFns:r.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}},490:function(t,n,e){t.exports=e.p+"img/56-1.cd13100.png"}}]);