(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{1179:function(v,_){const e={render:function(){var v=this;v.$createElement;return v._self._c,v._m(0)},staticRenderFns:[function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("div",{staticClass:"frontmatter-markdown"},[e("h2",{attrs:{id:"前言"}},[v._v("前言")]),v._v(" "),e("p",[v._v("此架构思路来自"),e("a",{attrs:{href:"https://www.bilibili.com/video/BV1vg411g7Fn"}},[v._v("此视频")])]),v._v(" "),e("p",[v._v("以下内容以使用 Unity3D 引擎为例")]),v._v(" "),e("h2",{attrs:{id:"思路"}},[v._v("思路")]),v._v(" "),e("ul",[e("li",[v._v("减少双向引用、循环引用")]),v._v(" "),e("li",[v._v("尽量使用树状结构、层级结构\n"),e("ul",[e("li",[v._v("尽量减少 Scene 中根节点的数量")])])]),v._v(" "),e("li",[v._v("尽量减少拖拽引用\n"),e("ul",[e("li",[v._v("难以维护，引用关系是随机的，需要自己写文档才能搞明白谁调用了谁")]),v._v(" "),e("li",[v._v("难以团队协作和版本控制，因为 Scene 的冲突会比代码的冲突更频繁")]),v._v(" "),e("li",[v._v("难以扩展，因为引用关系很乱，所以牵一发而动全身")])])]),v._v(" "),e("li",[v._v("小项目/无需维护的项目，可以不用架构。但是大项目/长期项目，建议用架构")]),v._v(" "),e("li",[v._v("高内聚，低耦合")])]),v._v(" "),e("h2",{attrs:{id:"对象交互"}},[v._v("对象交互")]),v._v(" "),e("ul",[e("li",[v._v("直接调用方法\n"),e("ul",[e("li",[v._v("前提：A 需要持有 B，才能调用 B 的方法")]),v._v(" "),e("li",[v._v("产生单向引用。如果滥用，就会导致复杂的引用关系")]),v._v(" "),e("li",[v._v("建议引用分层的思路，只能高层调用底层，父节点调用子节点")])])]),v._v(" "),e("li",[v._v("回调/委托\n"),e("ul",[e("li",[v._v("用来实现子节点调用父节点")]),v._v(" "),e("li",[v._v("前提：A 需要持有 B，才能注册 B 的委托")]),v._v(" "),e("li",[v._v("避免回调地狱/嵌套调用")])])]),v._v(" "),e("li",[v._v("消息/事件\n"),e("ul",[e("li",[v._v("跨模块调用")]),v._v(" "),e("li",[v._v("可以注册事件的 Listener")]),v._v(" "),e("li",[v._v("对象被销毁时，建议记得取消注册事件，比如在 OnDestroy 里面取消注册")]),v._v(" "),e("li",[v._v("多人协作的时候，只需要把事件的接口定义好即可")])])])]),v._v(" "),e("h2",{attrs:{id:"数据与表现分离"}},[v._v("数据与表现分离")]),v._v(" "),e("ul",[e("li",[v._v("有些数据可能是需要共享的，所以可以创建一个统一的数据层，可以被各级访问\n"),e("ul",[e("li",[v._v("也就是 MVC 里面的 Model")]),v._v(" "),e("li",[v._v("也可以在 Model 里面实现持久化、网络通信等功能")]),v._v(" "),e("li",[v._v("因为可以被各级访问，所以可能需要使用静态类")])])]),v._v(" "),e("li",[v._v("交互逻辑与表现逻辑\n"),e("ul",[e("li",[v._v("交互逻辑：View 修改 Model\n"),e("ul",[e("li",[v._v("优化：使用 Command\n"),e("ul",[e("li",[v._v("把交互（View）和实际的业务逻辑（Controller 中的逻辑）拆开，这样不同的 View 可以调用相同的业务逻辑")]),v._v(" "),e("li",[v._v("Command 可以使用 Struct 而不是 Class，内存管理效率会高一点点")]),v._v(" "),e("li",[v._v("Command 符合读写分离原则(CQRS)")]),v._v(" "),e("li",[v._v("逻辑的创建和调用是分离的\n"),e("ul",[e("li",[v._v("空间分离：在不同的文件里面实现")]),v._v(" "),e("li",[v._v("时间分离：在不同的时间被创建和调用")]),v._v(" "),e("li",[v._v("可以配合 Queue/Stack 实现缓冲、撤回等效果")])])]),v._v(" "),e("li",[v._v("可以让高级程序员写底层，初级程序员写 UI 等。也可以实现 UI 和逻辑的程序员的更好的分工")])])])])]),v._v(" "),e("li",[v._v("表现逻辑：Model 显示到 View\n"),e("ul",[e("li",[v._v("优化：使用观察者模式，也就是 Watch 数据的修改。底层其实还是基于回调/委托")]),v._v(" "),e("li",[v._v("单个数值的变化，建议使用回调/委托。大量数据的更新（比如用网络下载了大量数据），用事件会更好一些")])])])])])]),v._v(" "),e("h2",{attrs:{id:"模块化"}},[v._v("模块化")]),v._v(" "),e("ul",[e("li",[v._v("单例")]),v._v(" "),e("li",[v._v("IOC：控制反转\n"),e("ul",[e("li",[v._v("使用 IOC 容器，管理模块等的访问")])])]),v._v(" "),e("li",[v._v("分层，比如 MVC")]),v._v(" "),e("li",[v._v("ECS")])])])}]};v.exports={attributes:{title:"MVC",description:"Model-View-Controller架构"},vue:{render:e.render,staticRenderFns:e.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(v){return this.templateRender?this.templateRender():v("div","Rendering")},created:function(){this.templateRender=e.render,this.$options.staticRenderFns=e.staticRenderFns}}}}}}]);