(window.webpackJsonp=window.webpackJsonp||[]).push([[50,795,796,797,798,799,800],{1432:function(t,n,e){const _={render:function(){var t=this;t.$createElement;return t._self._c,t._m(0)},staticRenderFns:[function(){var t=this,n=t.$createElement,_=t._self._c||n;return _("div",{staticClass:"frontmatter-markdown"},[_("h2",{attrs:{id:"进程与程序"}},[t._v("进程与程序")]),t._v(" "),_("ul",[_("li",[t._v("程序\n"),_("ul",[_("li",[t._v("指令和数据的集合")]),t._v(" "),_("li",[t._v("存放在磁盘的一个普通文件中")]),t._v(" "),_("li",[t._v("文件的i结点标记为可执行的，且内容符合系统要求")])])]),t._v(" "),_("li",[t._v("进程\n"),_("ul",[_("li",[t._v("包括指令段、用户数据段和系统数据段的执行环境")])])])]),t._v(" "),_("p",[t._v("二者关系：")]),t._v(" "),_("ul",[_("li",[t._v("程序用于初始化进程的指令段和用户数据段，初始化之后进程和程序就没有联系了")]),t._v(" "),_("li",[t._v("进程运行的时候不能修改与删除程序")]),t._v(" "),_("li",[t._v("同一个程序可以用来初始化多个进程。进程之间没有什么联系，但是内核通过共享指令段来节省内存。这种安排对用户透明")])]),t._v(" "),_("h2",{attrs:{id:"进程的组成"}},[t._v("进程的组成")]),t._v(" "),_("p",[t._v("进程的逻辑地址空间布局：")]),t._v(" "),_("p",[_("img",{attrs:{src:e(879),alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("指令段text\n"),_("ul",[_("li",[t._v("程序的CPU代码，包括主程序、子程序、调用的库")]),t._v(" "),_("li",[t._v("大小固定，只读")])])]),t._v(" "),_("li",[t._v("用户数据段\n"),_("ul",[_("li",[t._v("全局变量、静态变量、字面量、堆（动态申请的变量")]),t._v(" "),_("li",[t._v("允许数据段大小变化，如系统调用sbrk()允许编程调整数据段大小，malloc和free进行数据管理")])])]),t._v(" "),_("li",[t._v("堆栈段（其实只有栈\n"),_("ul",[_("li",[t._v("用户堆栈段\n"),_("ul",[_("li",[t._v("实现函数的调用与返回\n"),_("ul",[_("li",[t._v("保存子程序返回地址")]),t._v(" "),_("li",[t._v("传递参数")]),t._v(" "),_("li",[t._v("块变量")])])]),t._v(" "),_("li",[t._v("main函数得到命令行参数与环境参数\n"),_("ul",[_("li",[t._v("存放在堆栈最底部")]),t._v(" "),_("li",[t._v("main函数运行之前就被系统初始化")])])]),t._v(" "),_("li",[t._v("堆栈段可以动态增长，但是有限制")])])]),t._v(" "),_("li",[t._v("系统堆栈段\n"),_("ul",[_("li",[t._v("是内核里面的数据，每个进程有一套。包括页表和进程控制块PCB")])])])])]),t._v(" "),_("li",[t._v("系统数据\n"),_("ul",[_("li",[t._v("页表")]),t._v(" "),_("li",[t._v("进程状态与优先级")]),t._v(" "),_("li",[t._v("核心堆栈")]),t._v(" "),_("li",[t._v("当前目录i节点，根目录")]),t._v(" "),_("li",[t._v("打开的文件的描述符表")]),t._v(" "),_("li",[t._v("umask值")]),t._v(" "),_("li",[t._v("进程PID，PPID")]),t._v(" "),_("li",[t._v("进程主的UID/GID，有效UID/GID")]),t._v(" "),_("li",[t._v("进程组组号")])])])]),t._v(" "),_("h2",{attrs:{id:"userproc结构"}},[t._v("user+proc结构")]),t._v(" "),_("p",[t._v("PCB被分为user结构和proc结构两部分")]),t._v(" "),_("ul",[_("li",[t._v("user结构约5000B\n"),_("ul",[_("li",[_("code",{pre:!0},[t._v("<sys/user.h>")])]),t._v(" "),_("li",[t._v("进程运行时才需要的数据")]),t._v(" "),_("li",[t._v("因为包含核心态堆栈所以占用了较多的空间")])])]),t._v(" "),_("li",[t._v("proc结构约300B\n"),_("ul",[_("li",[_("code",{pre:!0},[t._v("<sys/proc.h>")])]),t._v(" "),_("li",[t._v("进程不运行时也需要的管理信息")])])])]),t._v(" "),_("p",[t._v("程序不能直接存取或修改系统数据，但是可以通过系统调用来修改或访问它们，如chdir/umask/open/close/getpid…")]),t._v(" "),_("h2",{attrs:{id:"进程状态"}},[t._v("进程状态")]),t._v(" "),_("p",[t._v("主要有运行和睡眠（也叫阻塞、等待、挂起）状态")]),t._v(" "),_("p",[t._v("内核分时处理运行状态的进程。睡眠状态的进程满足条件后转化为运行状态。进程睡眠时不占用CPU时间（不是忙等待）")]),t._v(" "),_("h2",{attrs:{id:"进程调度"}},[t._v("进程调度")]),t._v(" "),_("p",[t._v("按照优先级调度")]),t._v(" "),_("p",[t._v("优先级不停在变化，刚从睡眠被唤醒的进程优先级高。")]),t._v(" "),_("p",[t._v("使用系统调用"),_("code",{pre:!0},[t._v("nice()")]),t._v("以有限的调整进程的优先级")]),t._v(" "),_("h2",{attrs:{id:"进程执行时间"}},[t._v("进程执行时间")]),t._v(" "),_("h3",{attrs:{id:"概述"}},[t._v("概述")]),t._v(" "),_("p",[t._v("包括")]),t._v(" "),_("ul",[_("li",[t._v("睡眠时间")]),t._v(" "),_("li",[t._v("CPU时间（用户时间+系统时间")])]),t._v(" "),_("h3",{attrs:{id:"命令"}},[t._v("命令")]),t._v(" "),_("p",[t._v("内部命令time可以用来计算进程执行时间，即"),_("code",{pre:!0},[t._v("time command")])]),t._v(" "),_("p",[t._v("与CPU时间相关的指令vmstat")]),t._v(" "),_("h3",{attrs:{id:"系统调用"}},[t._v("系统调用")]),t._v(" "),_("ul",[_("li",[_("code",{pre:!0},[t._v("times()")]),t._v(" "),_("ul",[_("li",[t._v("返回当前进程CPU时间和已结束的子进程占用过的CPU时间")]),t._v(" "),_("li",[t._v("详见结构体"),_("code",{pre:!0},[t._v("tms")])])])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("clock()")]),t._v(" "),_("ul",[_("li",[t._v("返回"),_("code",{pre:!0},[t._v("times()")]),t._v("结构体的四个时间之和")]),t._v(" "),_("li",[t._v("单位是1/clocks per sec")])])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("getrusage()")]),t._v(" "),_("ul",[_("li",[t._v("是"),_("code",{pre:!0},[t._v("time()")]),t._v("的升级版本，返回CPU时间和其他资源使用情况")])])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("time()")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("gettimeofday()")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("localtime()")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("mktime()")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("ctime()")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("asctime()")])])]),t._v(" "),_("h2",{attrs:{id:"fork"}},[t._v("fork")]),t._v(" "),_("p",[t._v("系统调用fork是"),_("strong",[t._v("创建新进程的唯一方式")])]),t._v(" "),_("p",[t._v("原先的进程为父进程，新创建的进程为子进程。子进程从fork函数继续执行")]),t._v(" "),_("p",[t._v("完全复制指令、用户数据端、堆栈段，部分复制系统数据段")]),t._v(" "),_("p",[t._v("父子进程都会收到fork函数的返回值，但是返回值不同，用来区分父子进程。父进程的返回值为子进程的PID（大于0），子进程返回值为0。失败时返回-1")]),t._v(" "),_("p",[t._v("内核会创建新的proc结构并复制父进程的环境（比如user结构和内存资源）给子进程。父子进程可以共享程序和数据（比如copy-on-write技术），这些由系统调度，对用户透明")]),t._v(" "),_("h2",{attrs:{id:"ps"}},[t._v("ps")]),t._v(" "),_("p",[t._v("查阅进程状态(process status)，其实就是打印进程中的proc和user数组的部分信息")]),t._v(" "),_("p",[t._v("常用选项：")]),t._v(" "),_("ul",[_("li",[t._v("无选项，仅列出当前终端上的进程，包括PID, TTY, TIME, COMMAND")]),t._v(" "),_("li",[t._v("-e 列出系统所有进程")]),t._v(" "),_("li",[t._v("-f 以full格式列出进程")]),t._v(" "),_("li",[t._v("-l 以long格式列出进程")])]),t._v(" "),_("p",[t._v("列出的进程属性：")]),t._v(" "),_("ul",[_("li",[t._v("UID - 用户ID")]),t._v(" "),_("li",[t._v("PID - 进程ID")]),t._v(" "),_("li",[t._v("C - CPU占用指数，最近一段时间进程占用CPU情况")]),t._v(" "),_("li",[t._v("PPID - 父进程PID")]),t._v(" "),_("li",[t._v("STIME - 启动时间")]),t._v(" "),_("li",[t._v("SZ - 进程逻辑内存大小")]),t._v(" "),_("li",[t._v("TTY - 终端名字")]),t._v(" "),_("li",[t._v("COMMAND - 命令名")]),t._v(" "),_("li",[t._v("WCHAN - 进程睡眠通道wait channel")]),t._v(" "),_("li",[t._v("TIME - 累计执行时间（占用CPU时间")]),t._v(" "),_("li",[t._v("PRI - 优先级")]),t._v(" "),_("li",[t._v("S - 状态，可以是Sleep/Run/Zombie")])]),t._v(" "),_("h2",{attrs:{id:"命令行参数与环境参数"}},[t._v("命令行参数与环境参数")]),t._v(" "),_("p",[t._v("位于进程堆栈底部的初始化数据")]),t._v(" "),_("p",[t._v("访问命令行参数："),_("code",{pre:!0},[t._v("argv, argc")])]),t._v(" "),_("p",[t._v("访问环境参数：")]),t._v(" "),_("ul",[_("li",[t._v("C语言库定义的外部变量"),_("code",{pre:!0},[t._v("environ")])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("main")]),t._v("函数的第三个参数")]),t._v(" "),_("li",[t._v("调用库函数"),_("code",{pre:!0},[t._v("getenv")])])]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("environ"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  p "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" environ"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%s]\\n"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intargc"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("env"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  p "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%s]\\n"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOME"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%s]\\n"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("h2",{attrs:{id:"exec"}},[t._v("exec")]),t._v(" "),_("p",[t._v("系统调用exec: 用一个指定的程序文件，重新初始化一个进程。可以指定新的命令行参数和环境参数")]),t._v(" "),_("p",[_("strong",[t._v("exec不创建新进程")]),t._v("，只是把当前进程重新初始化了指令段、用户数据段、堆栈段和PC指针")]),t._v(" "),_("p",[t._v("exec有6中调用格式：exec作为前缀，后面跟一到两个字母")]),t._v(" "),_("ul",[_("li",[t._v("l - list - 以表的形式提供命令行参数")]),t._v(" "),_("li",[t._v("v - vector - 以向量的形式提供命令行参数")]),t._v(" "),_("li",[t._v("e - env - 需要指定环境变量来初始化进程")]),t._v(" "),_("li",[t._v("p - path - 使用环境变量PATH查找可执行文件")])]),t._v(" "),_("p",[t._v("6种格式如下：")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg0"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execv")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execle")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg0"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("envp"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" envp"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execlp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg0"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("execvp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("6种格式的区别 - 使用不同方案初始化堆栈底部")]),t._v(" "),_("p",[t._v("文件描述符会被继承")]),t._v(" "),_("h2",{attrs:{id:"僵尸进程"}},[t._v("僵尸进程")]),t._v(" "),_("p",[t._v("zombie或defunct")]),t._v(" "),_("p",[t._v("进程生命期结束时的特殊状态，系统已经释放了进程占用的包括内存的系统资源，但是仍在内核中保留了部分数据结构，记录进程的终止状态，等待父进程来收尸。父进程收尸之后僵尸进程不再存在")]),t._v(" "),_("p",[t._v("僵尸进程占用资源很少，但是占用内核进程表的资源。过多的僵尸进程会导致系统进程表被用光")]),t._v(" "),_("p",[t._v("孤儿进程 - 父进程执行完毕后仍然存在的进程，将被1号进程init所收养。")]),t._v(" "),_("h2",{attrs:{id:"wait"}},[t._v("wait")]),t._v(" "),_("p",[t._v("系统调用wait: 等待子进程终止。一旦有一个子进程终止，立即返回此子进程PID")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/wait.h>")])]),t._v("\npid_t "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("stat_loc"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npid "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("status"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("status中有子进程终止的原因，比如TERMSIG被杀，EXITSTATUS退出码")]),t._v(" "),_("p",[t._v("wait的升级版本：waitpid和wait3")]),t._v(" "),_("h2",{attrs:{id:"字符串库函数strtok"}},[t._v("字符串库函数strtok")]),t._v(" "),_("p",[t._v("从字符串中解析token")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("strtok")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sep"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("用法：传入字符串str和分隔符sep（通常是空格、制表、换行），返回第一个单词首字节指针")]),t._v(" "),_("p",[_("img",{attrs:{src:e(880),alt:""}})]),t._v(" "),_("h2",{attrs:{id:"system"}},[t._v("system")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("string"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("执行一个命令。可以使用管道与重定向，通过系统调用"),_("code",{pre:!0},[t._v("fork & exec & wait")]),t._v("实现")]),t._v(" "),_("h2",{attrs:{id:"活动文件目录afd"}},[t._v("活动文件目录AFD")]),t._v(" "),_("p",[t._v("普通磁盘文件目录有两个表项 - 文件名，i节点")]),t._v(" "),_("p",[t._v("活动文件目录包括：")]),t._v(" "),_("ul",[_("li",[t._v("文件描述符表FDT\n"),_("ul",[_("li",[t._v("每个进程一张表，在PCB的user结构中")]),t._v(" "),_("li",[t._v("user结构中的整形数组u_ofile记录了进程打开的所有文件")]),t._v(" "),_("li",[t._v("文件描述符fd是u_ofile数组的下标")])])]),t._v(" "),_("li",[t._v("系统文件表SFT\n"),_("ul",[_("li",[t._v("整个内核一张表")]),t._v(" "),_("li",[t._v("记录了引用计数")])])]),t._v(" "),_("li",[t._v("活动节点表\n"),_("ul",[_("li",[t._v("整个内核一张表")]),t._v(" "),_("li",[t._v("也有引用计数")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:e(881),alt:""}})]),t._v(" "),_("p",[t._v("设置三层结构的目的：")]),t._v(" "),_("ul",[_("li",[t._v("不同进程可能访问同一个文件的同一个位置（FDT位置不同，SFT位置相同")]),t._v(" "),_("li",[t._v("不同进程可能访问同一个文件不同位置（FDT位置不同，SFT位置不同，iNode相同")]),t._v(" "),_("li",[t._v("不同进程可能访问不同文件（FDT位置不同，SFT位置不同，iNode不同")])]),t._v(" "),_("h2",{attrs:{id:"文件描述符的继承"}},[t._v("文件描述符的继承")]),t._v(" "),_("p",[t._v("子进程继承父进程的文件描述符表")]),t._v(" "),_("p",[_("img",{attrs:{src:e(882),alt:""}})]),t._v(" "),_("p",[t._v("如果二者访问文件位置不同，SFT的指针才会不同")]),t._v(" "),_("h2",{attrs:{id:"close-on-exec标志"}},[t._v("close-on-exec标志")]),t._v(" "),_("p",[t._v("如果文件描述符fd设置了close-on-exec标志，那么在执行exec系统调用时系统会自动关闭文件")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<fcntl.h>")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("ul",[_("li",[t._v("cmd可以是\n"),_("ul",[_("li",[t._v("F_GETFD - 获取fd的控制字")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("flag = fcntl(fd, F_GETFD, 0)")])]),t._v(" "),_("li",[t._v("F_SETFD - 设置fd的控制字")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("fcntl(fd, F_SETFD, flag)")])])])])]),t._v(" "),_("p",[t._v("标志使用bitmask实现。close-on-exec的标志是FD_CLOEXEC。所以设置close-on-exec标志位：")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[t._v("flag "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" F_GETFD"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" FD_CLOEXEC"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" F_SETFD"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("h2",{attrs:{id:"文件描述符的复制"}},[t._v("文件描述符的复制")]),t._v(" "),_("p",[t._v("系统调用"),_("code",{pre:!0},[t._v("int dup2(int fd1, int fd2)")])]),t._v(" "),_("p",[t._v("效果：")]),t._v(" "),_("ul",[_("li",[t._v("复制fd1到fd2，即："),_("code",{pre:!0},[t._v("FDT[fd2] = FDT[fd1]")])]),t._v(" "),_("li",[t._v("fd2可以是空闲的文件描述符")]),t._v(" "),_("li",[t._v("如果fd2是已打开的文件则关闭文件")])]),t._v(" "),_("p",[_("img",{attrs:{src:e(883),alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("可以复制到0、1、2号文件实现子进程重定向")])]),t._v(" "),_("h2",{attrs:{id:"管道"}},[t._v("管道")]),t._v(" "),_("h3",{attrs:{id:"创建"}},[t._v("创建")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pfd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pfd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pfd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("创建管道，"),_("code",{pre:!0},[t._v("pfd[0]")]),t._v("用于读，"),_("code",{pre:!0},[t._v("pfd[1]")]),t._v("用于写")]),t._v(" "),_("h3",{attrs:{id:"写"}},[t._v("写")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("ret = write(pfd[1], buf, n)")])]),t._v(" "),_("p",[t._v("如果管道已满则阻塞，直到另一端read把管道内的数据取走")]),t._v(" "),_("p",[t._v("管道容量为有限值，如8192B")]),t._v(" "),_("h3",{attrs:{id:"读"}},[t._v("读")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("ret = read(pfd[0], buf, n)")])]),t._v(" "),_("ul",[_("li",[t._v("如果管道的写端已经关闭，返回0")]),t._v(" "),_("li",[t._v("如果管道为空，且写端文件描述符未关闭，则阻塞")]),t._v(" "),_("li",[t._v("如果管道不为空，假设管道有m字节\n"),_("ul",[_("li",[t._v("如果n大于等于m则读m个")]),t._v(" "),_("li",[t._v("否则读n个")])])]),t._v(" "),_("li",[t._v("返回实际读取数目")])]),t._v(" "),_("p",[t._v("注意："),_("strong",[t._v("管道不记录边界")])]),t._v(" "),_("h3",{attrs:{id:"关闭"}},[t._v("关闭")]),t._v(" "),_("p",[t._v("关闭读端则写端write会触发SIGPIPE信号，默认终止进程。信号可以被捕捉。写端write返回-1，errno被设置为EPIPE")]),t._v(" "),_("h3",{attrs:{id:"父子进程管道通信"}},[t._v("父子进程管道通信")]),t._v(" "),_("p",[_("img",{attrs:{src:e(884),alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("如果要实现双向通信，应该使用两个管道以防止数据边界模糊")])]),t._v(" "),_("p",[t._v("可能死锁：")]),t._v(" "),_("ul",[_("li",[t._v("父进程因输出管道满而阻塞")]),t._v(" "),_("li",[t._v("子进程不读取，试图写，把输出管道也写满，阻塞")])]),t._v(" "),_("h2",{attrs:{id:"命名管道"}},[t._v("命名管道")]),t._v(" "),_("p",[t._v("管道仅允许同祖先进程间通信，命名管道允许不相干进程通信")]),t._v(" "),_("h3",{attrs:{id:"创建-1"}},[t._v("创建")]),t._v(" "),_("p",[t._v("使用命令"),_("code",{pre:!0},[t._v("mknod pipe0 p")]),t._v("创建一个文件，文件名为"),_("code",{pre:!0},[t._v("pipe0")]),t._v("，文件类型为"),_("code",{pre:!0},[t._v("p")])]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sender")]),t._v("\nfd "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pipe0"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_WRONLY"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//receiver")]),t._v("\nfd "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pipe0"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_RDONLY"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("h2",{attrs:{id:"信号"}},[t._v("信号")]),t._v(" "),_("h3",{attrs:{id:"kill命令"}},[t._v("kill命令")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("kill -signal PID-list")])]),t._v(" "),_("p",[t._v("效果：向一些进程发送信号。默认信号为15(SIGTERM)，通常会导致进程死亡")]),t._v(" "),_("h3",{attrs:{id:"进程组"}},[t._v("进程组")]),t._v(" "),_("p",[t._v("进程在它的proc结构中有"),_("code",{pre:!0},[t._v("p_pgrp")]),t._v("域，此域相同的进程构成进程组")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("p_pgrp=p_pid")]),t._v("的进程是进程组的组长")]),t._v(" "),_("p",[t._v("系统调用"),_("code",{pre:!0},[t._v("setsid()")]),t._v("可以把进程的"),_("code",{pre:!0},[t._v("p_pgrp")]),t._v("改为自己的PID从而脱离原进程组成为新的组长")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("fork")]),t._v("出来的进程、管道连接的进程通常在同一组")]),t._v(" "),_("p",[t._v("如果"),_("code",{pre:!0},[t._v("kill")]),t._v("命令的PID为0，则向当前进程的所有同组进程发送信号")]),t._v(" "),_("h3",{attrs:{id:"信号-1"}},[t._v("信号")]),t._v(" "),_("p",[_("strong",[t._v("软件中断")])]),t._v(" "),_("p",[t._v("可以由自己产生，也可以由其他进程产生（比如使用"),_("code",{pre:!0},[t._v("kill()")]),t._v("或"),_("code",{pre:!0},[t._v("alarm()")])]),t._v(" "),_("p",[t._v("常用信号：")]),t._v(" "),_("ul",[_("li",[t._v("SIGSEGV - 段违例信号，进程试图访问其地址空间之外的存储单元")]),t._v(" "),_("li",[t._v("SIGFPE - 浮点溢出信号，任何数除0")]),t._v(" "),_("li",[t._v("SIGPIPE - 管道信号，关闭管道读端则写端write时产生")])]),t._v(" "),_("p",[t._v("信号在头文件"),_("code",{pre:!0},[t._v("<sys/signal.h>")]),t._v("中")]),t._v(" "),_("p",[t._v("其他信号")]),t._v(" "),_("ul",[_("li",[t._v("SIGTERM - 软件终止信号。用kill命令时产生")]),t._v(" "),_("li",[t._v("SIGHUP - 挂断。当从注册shell中logout时，同一进程组的所有进程都收到SIGHUP")]),t._v(" "),_("li",[t._v("SIGINT - 中断。用户按Del键或Ctrl-C键时产生")]),t._v(" "),_("li",[t._v("SIGQUIT - 退出。按Ctrl-\\时产生，产生core文件")]),t._v(" "),_("li",[t._v("SIGALRM - 闹钟信号。计时器时间到，与alarm()有关")]),t._v(" "),_("li",[t._v("SIGCLD - 进程的一个子进程终止。")]),t._v(" "),_("li",[t._v("SIGKILL - 无条件终止，该信号不能被捕获或忽略。")]),t._v(" "),_("li",[t._v("SIGUSR1，SIGUSR2 - 用户定义的信号")]),t._v(" "),_("li",[t._v("SIGFPE - 浮点溢出")]),t._v(" "),_("li",[t._v("SIGILL - 非法指令")]),t._v(" "),_("li",[t._v("SIGSEGV - 段违例")])]),t._v(" "),_("h3",{attrs:{id:"处理信号"}},[t._v("处理信号")]),t._v(" "),_("p",[t._v("设置信号处理方式的函数："),_("code",{pre:!0},[t._v("signal(signal, method)")])]),t._v(" "),_("p",[t._v("处理信号的方式：")]),t._v(" "),_("ul",[_("li",[t._v("忽略信号\n"),_("ul",[_("li",[_("code",{pre:!0},[t._v("signal(signal, SIG_IGN)")])]),t._v(" "),_("li",[t._v("会被子进程继承")])])]),t._v(" "),_("li",[t._v("捕捉信号\n"),_("ul",[_("li",[_("code",{pre:!0},[t._v("signal(signal, some_function)")])]),t._v(" "),_("li",[t._v("function的格式："),_("code",{pre:!0},[t._v("void f(int)")])])])]),t._v(" "),_("li",[t._v("恢复为默认处理方式\n"),_("ul",[_("li",[_("code",{pre:!0},[t._v("signal(signal, SIG_DFL)")])])])])]),t._v(" "),_("h3",{attrs:{id:"信号与僵尸进程"}},[t._v("信号与僵尸进程")]),t._v(" "),_("p",[t._v("父进程使用wait收尸后消除僵尸")]),t._v(" "),_("p",[t._v("子进程终止后，系统向父进程发送SIGCLD")]),t._v(" "),_("p",[t._v("防止僵尸进程的方案（假设父进程很忙不能及时收尸子进程）：")]),t._v(" "),_("ul",[_("li",[t._v("忽略对SIGCLD信号的处理")]),t._v(" "),_("li",[t._v("捕获SIGCLD，执行"),_("code",{pre:!0},[t._v("wait()")])])]),t._v(" "),_("h3",{attrs:{id:"发送信号"}},[t._v("发送信号")]),t._v(" "),_("p",[t._v("系统调用"),_("code",{pre:!0},[t._v("int kill(int pid, int sig)")])]),t._v(" "),_("p",[t._v("返回0表示成功，-1表示失败")]),t._v(" "),_("ul",[_("li",[_("code",{pre:!0},[t._v("pid>0")]),t._v("向指定的进程发")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("pid=0")]),t._v("向当前进程组所有进程发")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("pid<0")]),t._v("向以"),_("code",{pre:!0},[t._v("-pid")]),t._v("为组长的所有进程发")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("sig=0")]),t._v("不发送信号，用来判断进程是否在运行\n"),_("ul",[_("li",[t._v("如果"),_("code",{pre:!0},[t._v("kill(pid, 0)")]),t._v("返回-1就可以根据errno判断，errno=ESRCH则说明目标进程不存在")])])])]),t._v(" "),_("h3",{attrs:{id:"信号与睡眠"}},[t._v("信号与睡眠")]),t._v(" "),_("p",[t._v("导致进程睡眠的系统调用：")]),t._v(" "),_("ul",[_("li",[t._v("scanf")]),t._v(" "),_("li",[t._v("sleep")]),t._v(" "),_("li",[t._v("msgrcv")]),t._v(" "),_("li",[t._v("read")]),t._v(" "),_("li",[t._v("write")]),t._v(" "),_("li",[t._v("…")])]),t._v(" "),_("p",[t._v("睡眠进程收到信号后立即惊醒，导致睡眠的系统调用返回-1，errno通常被设置为EINTR")]),t._v(" "),_("p",[t._v("有的特殊系统调用睡眠很深，信号不能将其惊醒（甚至kill -9）")]),t._v(" "),_("h3",{attrs:{id:"pause和alarm"}},[t._v("pause和alarm")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("pause()")]),t._v("等待信号。进程收到信号之前一直处于睡眠状态")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("int alarm(int secs)")]),t._v("设置报警时钟，报警时进程收到SIGALRM信号。子进程和exec都会进程报警值。SIGALRM默认处理是终止进程")]),t._v(" "),_("ul",[_("li",[_("code",{pre:!0},[t._v("secs>0")]),t._v("设置时钟为指定秒")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("secs=0")]),t._v("关闭报警时钟")])]),t._v(" "),_("h2",{attrs:{id:"ipc-信号灯semaphore"}},[t._v("IPC - 信号灯semaphore")]),t._v(" "),_("h3",{attrs:{id:"概述-1"}},[t._v("概述")]),t._v(" "),_("p",[t._v("操作系统里面的信号量")]),t._v(" "),_("p",[t._v("控制多进程对共享资源的互斥性访问和进程间同步")]),t._v(" "),_("p",[t._v("策略与机制相分离：UNIX仅提供信号灯机制，但是用户必须正确使用才能保证正确的互斥与同步。不正确的使用仍然会导致信息不安全与死锁")]),t._v(" "),_("p",[t._v("信号灯实现了PV操作，而且比简单的PV操作功能更强")]),t._v(" "),_("h3",{attrs:{id:"创建信号灯"}},[t._v("创建信号灯")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/ipc.h>")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/sem.h>")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("semget")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nsems"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("创建一个新的或获取一个存在的信号灯组。")]),t._v(" "),_("ul",[_("li",[t._v("nsems - 此信号灯组有多少个信号灯")]),t._v(" "),_("li",[t._v("flags - 创建或者获取")]),t._v(" "),_("li",[t._v("返回信号灯组的ID。返回-1表示失败")])]),t._v(" "),_("h3",{attrs:{id:"删除与查询信号灯"}},[t._v("删除与查询信号灯")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("semctl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sem_id"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" snum"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cmd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("ul",[_("li",[t._v("snum - 信号灯在信号灯组里面的编号")]),t._v(" "),_("li",[t._v("cmd - 控制命令，如删除、查询")]),t._v(" "),_("li",[t._v("arg - 执行命令的参数的存放区")]),t._v(" "),_("li",[t._v("返回-1时失败，否则成功")])]),t._v(" "),_("p",[t._v("删除信号灯："),_("code",{pre:!0},[t._v("semctl(sem_id, 0, IPC_RMID, 0)")])]),t._v(" "),_("h3",{attrs:{id:"操作信号灯"}},[t._v("操作信号灯")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("int semop(int sem_id, struct sembuf *ops, int nops);")])]),t._v(" "),_("ul",[_("li",[t._v("ops - 一个sembuf结构体数组，每个元素描述一个操作")]),t._v(" "),_("li",[t._v("nops - 指明ops数组长度")]),t._v(" "),_("li",[t._v("返回-1表示失败，否则成功")]),t._v(" "),_("li",[t._v("可能会导致调用进程在此睡眠")])]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sembuf")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" sem_num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 信号灯在信号灯组里面的编号，从0开始")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" sem_op"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 信号灯操作")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" sem_flg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作选项")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("ul",[_("li",[_("code",{pre:!0},[t._v("sem_op<0")]),t._v(" - P操作")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("sem_op>0")]),t._v(" - V操作")]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("sem_op=0")]),t._v(" - 不修改信号灯的值，等待直到其变为负数")])]),t._v(" "),_("p",[t._v("原子性 - 一次"),_("code",{pre:!0},[t._v("semop()")]),t._v("要么执行完所有操作，要么不执行")]),t._v(" "),_("h2",{attrs:{id:"ipc-共享内存"}},[t._v("IPC - 共享内存")]),t._v(" "),_("p",[t._v("多个进程共同使用同一段物理内存空间")]),t._v(" "),_("p",[t._v("使用共享内存传送数据，速度快，但是要保证多进程互斥与同步的问题")]),t._v(" "),_("ul",[_("li",[_("code",{pre:!0},[t._v("int shmget(int key, int nbytes, int flags)")]),t._v(" "),_("ul",[_("li",[t._v("创建一个新的或获取一个已存在的共享内存段")]),t._v(" "),_("li",[t._v("返回共享内存段的ID。返回-1表示失败")])])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("void *shmat(int shm_id, void *shmaddr, int shmflg)")]),t._v(" "),_("ul",[_("li",[t._v("获取指向共享内存段的指针（进程逻辑地址）。返回-1表示失败")])])]),t._v(" "),_("li",[_("code",{pre:!0},[t._v("int shmctl(int shm_id, int cmd, char *arg)")]),t._v(" "),_("ul",[_("li",[t._v("对共享内存段的操作，如删除、查询")]),t._v(" "),_("li",[t._v("cmd指定命令，arg指定cmd的参数")])])])]),t._v(" "),_("h2",{attrs:{id:"内存映射mmap"}},[t._v("内存映射MMAP")]),t._v(" "),_("h3",{attrs:{id:"概述-2"}},[t._v("概述")]),t._v(" "),_("p",[t._v("传统访问磁盘文件的方式：打开"),_("strong",[t._v("整个")]),t._v("文件，使用read/write访问文件")]),t._v(" "),_("p",[t._v("使用内存映射(MMAP: memory map)方式读写文件：")]),t._v(" "),_("ul",[_("li",[t._v("把文件中"),_("strong",[t._v("一部分连续的区域")]),t._v("映射为一段进程逻辑地址空间中的内存")]),t._v(" "),_("li",[t._v("访问这段内存就相当于访问了文件")]),t._v(" "),_("li",[t._v("系统根据各种映射与页面调度算法调度内存中的页")])]),t._v(" "),_("p",[t._v("内存映射优点：")]),t._v(" "),_("ul",[_("li",[t._v("比传统的访问更快\n"),_("ul",[_("li",[t._v("传统read需要内核把磁盘文件读入到内核缓冲区，再复制到用户进程缓冲区")])])]),t._v(" "),_("li",[t._v("多个独立进程可以共享内存(windows系统支持)\n"),_("ul",[_("li",[t._v("注意保证同步和互斥")])])])]),t._v(" "),_("h3",{attrs:{id:"新建mmap"}},[t._v("新建MMAP")]),t._v(" "),_("p",[t._v("系统调用"),_("code",{pre:!0},[t._v("void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);")])]),t._v(" "),_("ul",[_("li",[t._v("通知系统把哪个文件的哪个区域以哪种方式映射")]),t._v(" "),_("li",[t._v("成功时返回指针，失败时返回-1并把错误信息保存在errno")]),t._v(" "),_("li",[t._v("addr - 指定逻辑地址空间中映射区的起始地址。通常为0，意为操作系统自行选择")]),t._v(" "),_("li",[t._v("fd - 已打开的文件描述符")]),t._v(" "),_("li",[t._v("offset - 文件中的起始位置")]),t._v(" "),_("li",[t._v("len - 映射长度（字节")]),t._v(" "),_("li",[t._v("prot - 对映射区的保护，如PROT_READ/PROT_WRITE。必须与打开文件时的open相匹配")]),t._v(" "),_("li",[t._v("flags - 通常选择MAP_SHARE")])]),t._v(" "),_("h3",{attrs:{id:"mmap举例"}},[t._v("MMAP举例")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("mmap")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PROT_READ"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("PROT_WRITE"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAP_SHARED"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("p",[t._v("返回的p是一个指针，是文件fd从0开始的65536个字节")]),t._v(" "),_("p",[t._v("程序可以像访问普通数组那样访问"),_("code",{pre:!0},[t._v("p[0] - p[65535]")]),t._v("。系统会在合适的时机进行写回或读取")]),t._v(" "),_("h3",{attrs:{id:"删除mmap"}},[t._v("删除MMAP")]),t._v(" "),_("p",[_("code",{pre:!0},[t._v("int munmap(void *addr, size_t len)")])]),t._v(" "),_("p",[t._v("进程终止时也会自动删除")]),t._v(" "),_("h2",{attrs:{id:"文件和记录的锁定"}},[t._v("文件和记录的锁定")]),t._v(" "),_("h3",{attrs:{id:"概述-3"}},[t._v("概述")]),t._v(" "),_("ul",[_("li",[t._v("文件可以被多个进程同时访问，需要互斥")]),t._v(" "),_("li",[t._v("如果使用信号灯和共享内存，比较复杂")]),t._v(" "),_("li",[t._v("Unix提供了针对文件和记录的锁定机制，更方便")])]),t._v(" "),_("p",[t._v("记录 - 一个文件从某一个位置开始的连续字节流。")]),t._v(" "),_("p",[t._v("unix可以锁定文件的某一部分。锁定整个文件只是一种特例")]),t._v(" "),_("h3",{attrs:{id:"共享锁和互斥锁"}},[t._v("共享锁和互斥锁")]),t._v(" "),_("p",[t._v("共享锁（读锁） - 多个进程的读操作可以同时进行，排斥写操作")]),t._v(" "),_("p",[t._v("互斥锁（写锁） - 某个进程写记录的时候排斥其他进程对"),_("strong",[t._v("同一个记录")]),t._v("的写")]),t._v(" "),_("h3",{attrs:{id:"文件锁系统调用"}},[t._v("文件锁系统调用")]),t._v(" "),_("pre",{staticClass:"language-cpp"},[_("code",{pre:!0,attrs:{class:"language-cpp"}},[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("flock")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" l_type"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" l_whence"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l_start"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l_len"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l_sysid"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" l_pid"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cmd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("flock")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" lock"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("ul",[_("li",[t._v("cmd在记录上锁或解锁的应用中应当取F_SETLKW")]),t._v(" "),_("li",[t._v("l_type - 锁的类型\n"),_("ul",[_("li",[t._v("F_RDLCK - 上读锁")]),t._v(" "),_("li",[t._v("F_WRLCK - 上写锁")]),t._v(" "),_("li",[t._v("F_UNLCK - 解锁")])])]),t._v(" "),_("li",[t._v("l_whence & l_start - 描述记录从文件的何处开始\n"),_("ul",[_("li",[t._v("描述方法和系统调用"),_("code",{pre:!0},[t._v("lseek()")]),t._v("相同")])])]),t._v(" "),_("li",[t._v("l_len - 描述记录的字节数\n"),_("ul",[_("li",[t._v("取0时表示从开始位置到文件尾的超尾元素")])])])])])}]};t.exports={attributes:{layout:"collection",title:"进程控制与进程间通信",collection:"LinuxProgrammingEnvironment"},vue:{render:_.render,staticRenderFns:_.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=_.render,this.$options.staticRenderFns=_.staticRenderFns}}}}},879:function(t,n,e){t.exports=e.p+"img/5-1.aac5270.png"},880:function(t,n,e){t.exports=e.p+"img/5-2.cea569c.png"},881:function(t,n,e){t.exports=e.p+"img/5-3.c2ad9f7.png"},882:function(t,n,e){t.exports=e.p+"img/5-4.03bc79c.png"},883:function(t,n,e){t.exports=e.p+"img/5-5.996c423.png"},884:function(t,n,e){t.exports=e.p+"img/5-6.87be4cf.png"}}]);